From: Robert Ancell <robert.ancell@canonical.com>
Date: Tue, 20 Mar 2018 11:51:30 +1300
Subject: Add Ubuntu mode with special pages

---
 data/com.ubuntu.welcome.policy.in                  |  21 +
 data/its/polkit.its                                |   8 +
 data/its/polkit.loc                                |   6 +
 data/meson.build                                   |   8 +
 gnome-initial-setup/gis-driver.c                   |  30 +
 gnome-initial-setup/gis-driver.h                   |   6 +
 gnome-initial-setup/gnome-initial-setup.c          |  41 +-
 gnome-initial-setup/meson.build                    |   3 +
 gnome-initial-setup/pages/apps/apps.gresource.xml  |   8 +
 .../pages/apps/default-snap-icon.svg               |   1 +
 gnome-initial-setup/pages/apps/gis-apps-page.c     | 666 +++++++++++++++++++++
 gnome-initial-setup/pages/apps/gis-apps-page.h     |  52 ++
 gnome-initial-setup/pages/apps/gis-apps-page.ui    | 111 ++++
 gnome-initial-setup/pages/apps/meson.build         |  10 +
 .../pages/livepatch/gis-auth-dialog.c              | 528 ++++++++++++++++
 .../pages/livepatch/gis-auth-dialog.h              |  40 ++
 .../pages/livepatch/gis-auth-dialog.ui             | 231 +++++++
 .../pages/livepatch/gis-livepatch-page.c           | 538 +++++++++++++++++
 .../pages/livepatch/gis-livepatch-page.h           |  52 ++
 .../pages/livepatch/gis-livepatch-page.ui          | 156 +++++
 .../pages/livepatch/livepatch.gresource.xml        |   9 +
 gnome-initial-setup/pages/livepatch/livepatch.svg  |   1 +
 gnome-initial-setup/pages/livepatch/meson.build    |  12 +
 gnome-initial-setup/pages/meson.build              |   3 +
 .../pages/privacy/gis-privacy-page.c               |   2 +-
 .../pages/summary/gis-summary-page.c               |   2 +-
 .../pages/ubuntu-report/gis-ubuntu-report-page.c   | 207 +++++++
 .../pages/ubuntu-report/gis-ubuntu-report-page.h   |  52 ++
 .../pages/ubuntu-report/gis-ubuntu-report-page.ui  | 181 ++++++
 .../pages/ubuntu-report/meson.build                |  10 +
 .../ubuntu-report/ubuntu-report.gresource.xml      |   8 +
 .../pages/ubuntu-report/ubuntu-report.svg          |   1 +
 meson.build                                        |   3 +
 po/POTFILES.in                                     |  10 +
 34 files changed, 3013 insertions(+), 4 deletions(-)
 create mode 100644 data/com.ubuntu.welcome.policy.in
 create mode 100644 data/its/polkit.its
 create mode 100644 data/its/polkit.loc
 create mode 100644 gnome-initial-setup/pages/apps/apps.gresource.xml
 create mode 100644 gnome-initial-setup/pages/apps/default-snap-icon.svg
 create mode 100644 gnome-initial-setup/pages/apps/gis-apps-page.c
 create mode 100644 gnome-initial-setup/pages/apps/gis-apps-page.h
 create mode 100644 gnome-initial-setup/pages/apps/gis-apps-page.ui
 create mode 100644 gnome-initial-setup/pages/apps/meson.build
 create mode 100644 gnome-initial-setup/pages/livepatch/gis-auth-dialog.c
 create mode 100644 gnome-initial-setup/pages/livepatch/gis-auth-dialog.h
 create mode 100644 gnome-initial-setup/pages/livepatch/gis-auth-dialog.ui
 create mode 100644 gnome-initial-setup/pages/livepatch/gis-livepatch-page.c
 create mode 100644 gnome-initial-setup/pages/livepatch/gis-livepatch-page.h
 create mode 100644 gnome-initial-setup/pages/livepatch/gis-livepatch-page.ui
 create mode 100644 gnome-initial-setup/pages/livepatch/livepatch.gresource.xml
 create mode 100644 gnome-initial-setup/pages/livepatch/livepatch.svg
 create mode 100644 gnome-initial-setup/pages/livepatch/meson.build
 create mode 100644 gnome-initial-setup/pages/ubuntu-report/gis-ubuntu-report-page.c
 create mode 100644 gnome-initial-setup/pages/ubuntu-report/gis-ubuntu-report-page.h
 create mode 100644 gnome-initial-setup/pages/ubuntu-report/gis-ubuntu-report-page.ui
 create mode 100644 gnome-initial-setup/pages/ubuntu-report/meson.build
 create mode 100644 gnome-initial-setup/pages/ubuntu-report/ubuntu-report.gresource.xml
 create mode 100644 gnome-initial-setup/pages/ubuntu-report/ubuntu-report.svg

diff --git a/data/com.ubuntu.welcome.policy.in b/data/com.ubuntu.welcome.policy.in
new file mode 100644
index 0000000..cf623d5
--- /dev/null
+++ b/data/com.ubuntu.welcome.policy.in
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE policyconfig PUBLIC
+ "-//freedesktop//DTD PolicyKit Policy Configuration 1.0//EN"
+ "http://www.freedesktop.org/standards/PolicyKit/1.0/policyconfig.dtd">
+
+<policyconfig>
+  <vendor>Ubuntu Welcome</vendor>
+  <vendor_url>https://www.ubuntu.com/</vendor_url>
+
+  <action id="com.ubuntu.welcome.livepatch">
+    <description>Manage Livepatch</description>
+    <message>Authentication is required to enable Livepatch</message>
+    <defaults>
+      <allow_any>no</allow_any>
+      <allow_inactive>no</allow_inactive>
+      <allow_active>auth_admin_keep</allow_active>
+    </defaults>
+    <annotate key="org.freedesktop.policykit.imply">io.snapcraft.snapd.login com.ubuntu.softwareproperties.applychanges </annotate>
+  </action>
+
+</policyconfig>
\ No newline at end of file
diff --git a/data/its/polkit.its b/data/its/polkit.its
new file mode 100644
index 0000000..c48ad3f
--- /dev/null
+++ b/data/its/polkit.its
@@ -0,0 +1,8 @@
+<?xml version="1.0"?>
+<its:rules xmlns:its="http://www.w3.org/2005/11/its"
+           version="2.0">
+  <its:translateRule selector="//*" translate="no"/>
+  <its:translateRule selector="//action/description |
+                               //action/message"
+                     translate="yes"/>
+</its:rules>
\ No newline at end of file
diff --git a/data/its/polkit.loc b/data/its/polkit.loc
new file mode 100644
index 0000000..12c7bf0
--- /dev/null
+++ b/data/its/polkit.loc
@@ -0,0 +1,6 @@
+<?xml version="1.0"?>
+<locatingRules>
+  <locatingRule name="polkit policy" pattern="*.policy">
+    <documentRule localName="policyconfig" target="polkit.its"/>
+  </locatingRule>
+</locatingRules>
\ No newline at end of file
diff --git a/data/meson.build b/data/meson.build
index 31fa2f9..0fbb7d1 100644
--- a/data/meson.build
+++ b/data/meson.build
@@ -99,6 +99,14 @@ if enable_systemd
     )
 endif
 
+i18n.merge_file(
+    input: 'com.ubuntu.welcome.policy.in',
+    output: 'com.ubuntu.welcome.policy',
+    install: true,
+    install_dir: join_paths(data_dir, 'polkit-1', 'actions'),
+    po_dir: po_dir,
+    type: 'xml'
+)
 
 rules_dir = join_paths(data_dir, 'polkit-1', 'rules.d')
 configure_file(
diff --git a/gnome-initial-setup/gis-driver.c b/gnome-initial-setup/gis-driver.c
index 77434ee..f0f50c9 100644
--- a/gnome-initial-setup/gis-driver.c
+++ b/gnome-initial-setup/gis-driver.c
@@ -101,6 +101,9 @@ struct _GisDriver {
 
   const gchar *vendor_conf_file_path;
   GKeyFile *vendor_conf_file;
+
+  guint inhibit_count;
+  gboolean quit_requested;
 };
 
 G_DEFINE_TYPE (GisDriver, gis_driver, GTK_TYPE_APPLICATION)
@@ -979,6 +982,33 @@ gis_driver_save_data (GisDriver  *driver,
   return gis_assistant_save_data (driver->assistant, error);
 }
 
+void
+gis_driver_inhibit_quit (GisDriver *driver)
+{
+  driver->inhibit_count++;
+}
+
+void
+gis_driver_uninhibit_quit (GisDriver *driver)
+{
+  driver->inhibit_count--;
+  if (!driver->inhibit_count && driver->quit_requested)
+    gis_driver_quit (driver);
+}
+
+void gis_driver_quit (GisDriver *driver)
+{
+  if (driver->inhibit_count == 0)
+    {
+      g_application_quit (G_APPLICATION (driver));
+    }
+  else
+    {
+      driver->quit_requested = TRUE;
+      gtk_widget_hide (GTK_WIDGET (driver->main_window));
+    }
+  }
+
 GisDriver *
 gis_driver_new (GisDriverMode mode)
 {
diff --git a/gnome-initial-setup/gis-driver.h b/gnome-initial-setup/gis-driver.h
index 467b419..3dcb706 100644
--- a/gnome-initial-setup/gis-driver.h
+++ b/gnome-initial-setup/gis-driver.h
@@ -120,6 +120,12 @@ gchar *gis_driver_conf_get_string (GisDriver *driver,
                                    const gchar *group,
                                    const gchar *key);
 
+void gis_driver_inhibit_quit (GisDriver *driver);
+
+void gis_driver_uninhibit_quit (GisDriver *driver);
+
+void gis_driver_quit (GisDriver *driver);
+
 GisDriver *gis_driver_new (GisDriverMode mode);
 
 G_END_DECLS
diff --git a/gnome-initial-setup/gnome-initial-setup.c b/gnome-initial-setup/gnome-initial-setup.c
index a4c6711..81281d8 100644
--- a/gnome-initial-setup/gnome-initial-setup.c
+++ b/gnome-initial-setup/gnome-initial-setup.c
@@ -44,6 +44,9 @@
 #include "pages/parental-controls/gis-parental-controls-page.h"
 #include "pages/password/gis-password-page.h"
 #include "pages/summary/gis-summary-page.h"
+#include "pages/ubuntu-report/gis-ubuntu-report-page.h"
+#include "pages/livepatch/gis-livepatch-page.h"
+#include "pages/apps/gis-apps-page.h"
 
 #define VENDOR_PAGES_GROUP "pages"
 #define VENDOR_SKIP_KEY "skip"
@@ -83,6 +86,17 @@ static PageData page_table[] = {
   { NULL },
 };
 
+static PageData ubuntu_page_table[] = {
+  PAGE (goa,            FALSE),
+  PAGE (livepatch,      FALSE),
+  PAGE (ubuntu_report,  FALSE),
+  PAGE (privacy,        FALSE),
+  PAGE (account,        TRUE),
+  PAGE (password,       TRUE),
+  PAGE (apps,           FALSE),
+  { NULL },
+};
+
 #undef PAGE
 
 static gboolean
@@ -180,6 +194,25 @@ destroy_pages_after (GisAssistant *assistant,
   }
 }
 
+static gboolean
+is_desktop (const gchar *name)
+{
+  const gchar *xdg_current_desktop;
+  g_auto(GStrv) tokens = NULL;
+  int i;
+
+  xdg_current_desktop = g_getenv ("XDG_CURRENT_DESKTOP");
+  if (xdg_current_desktop == NULL)
+    return FALSE;
+
+  tokens = g_strsplit (xdg_current_desktop, ":", -1);
+  for (i = 0; tokens[i] != NULL; i++)
+    if (strcmp (tokens[i], name) == 0)
+      return TRUE;
+
+  return FALSE;
+}
+
 static void
 rebuild_pages_cb (GisDriver *driver)
 {
@@ -192,7 +225,11 @@ rebuild_pages_cb (GisDriver *driver)
 
   assistant = gis_driver_get_assistant (driver);
   current_page = gis_assistant_get_current_page (assistant);
-  page_data = page_table;
+
+  if (is_desktop ("ubuntu"))
+    page_data = ubuntu_page_table;
+  else
+    page_data = page_table;
 
   g_ptr_array_free (skipped_pages, TRUE);
   skipped_pages = g_ptr_array_new_with_free_func ((GDestroyNotify) gtk_widget_destroy);
@@ -200,7 +237,7 @@ rebuild_pages_cb (GisDriver *driver)
   if (current_page != NULL) {
     destroy_pages_after (assistant, current_page);
 
-    for (page_data = page_table; page_data->page_id != NULL; ++page_data)
+    for (page_data = ubuntu_page_table; page_data->page_id != NULL; ++page_data) // FIXME conditional
       if (g_str_equal (page_data->page_id, GIS_PAGE_GET_CLASS (current_page)->page_id))
         break;
 
diff --git a/gnome-initial-setup/meson.build b/gnome-initial-setup/meson.build
index 43321ec..60edab8 100644
--- a/gnome-initial-setup/meson.build
+++ b/gnome-initial-setup/meson.build
@@ -52,6 +52,9 @@ dependencies = [
     dependency ('libsecret-1', version: '>= 0.18.8'),
     dependency ('pwquality'),
     dependency ('webkit2gtk-4.0', version: '>= 2.26.0'),
+    dependency ('snapd-glib'),
+    dependency ('libsoup-2.4'),
+    dependency ('sysmetrics'),
     cheese_dep,
     cheese_gtk_dep,
     ibus_dep,
diff --git a/gnome-initial-setup/pages/apps/apps.gresource.xml b/gnome-initial-setup/pages/apps/apps.gresource.xml
new file mode 100644
index 0000000..e89e744
--- /dev/null
+++ b/gnome-initial-setup/pages/apps/apps.gresource.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<gresources>
+  <gresource prefix="/org/gnome/initial-setup">
+    <file preprocess="xml-stripblanks" alias="gis-apps-page.ui">gis-apps-page.ui</file>
+    <file preprocess="xml-stripblanks">default-snap-icon.svg</file>
+  </gresource>
+</gresources>
+
diff --git a/gnome-initial-setup/pages/apps/default-snap-icon.svg b/gnome-initial-setup/pages/apps/default-snap-icon.svg
new file mode 100644
index 0000000..0d8dd94
--- /dev/null
+++ b/gnome-initial-setup/pages/apps/default-snap-icon.svg
@@ -0,0 +1 @@
+<svg width="96" height="96" xmlns="http://www.w3.org/2000/svg"><circle fill="#F7F7F7" cx="48" cy="48" r="48"/><path d="M55.71 53.294V32.766l14.248 6.28L55.71 53.293zM28.901 80.102L46.049 47.74l7.728 7.486-24.875 24.876zM19 19l35.502 12.8v22.702L19 19zm58.204 12.8L83 43.634 56.675 31.8h20.529z" fill="#CDCDCD"/></svg>
\ No newline at end of file
diff --git a/gnome-initial-setup/pages/apps/gis-apps-page.c b/gnome-initial-setup/pages/apps/gis-apps-page.c
new file mode 100644
index 0000000..6c0bd47
--- /dev/null
+++ b/gnome-initial-setup/pages/apps/gis-apps-page.c
@@ -0,0 +1,666 @@
+/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
+/*
+ * Copyright (C) 2018 Canonical Ltd.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see <http://www.gnu.org/licenses/>.
+ */
+
+/* Get more apps page {{{1 */
+
+#define PAGE_ID "apps"
+
+#include "config.h"
+#include "gis-apps-page.h"
+#include "apps-resources.h"
+
+#include <glib/gi18n.h>
+#include <gio/gio.h>
+#include <snapd-glib/snapd-glib.h>
+#include <libsoup/soup.h>
+
+struct _GisAppsPagePrivate {
+  SoupSession *soup_session;
+  SnapdClient *client;
+
+  GtkWidget *main_stack;
+  GtkWidget *spinner;
+  GtkWidget *featured_stack;
+  GtkWidget *prev_featured_button;
+  GtkWidget *next_featured_button;
+
+  GCancellable *cancellable;
+  guint featured_snaps_timeout_id;
+
+  GPtrArray *installed_snaps;
+  GPtrArray *featured_snaps;
+};
+typedef struct _GisAppsPagePrivate GisAppsPagePrivate;
+
+G_DEFINE_TYPE_WITH_PRIVATE (GisAppsPage, gis_apps_page, GIS_TYPE_PAGE);
+
+struct _GisSnapTile
+{
+  GtkFlowBoxChild parent;
+  SnapdSnap *snap;
+  SoupSession *soup_session;
+  GtkWidget *icon;
+};
+G_DECLARE_FINAL_TYPE (GisSnapTile, gis_snap_tile, GIS, SNAP_TILE, GtkFlowBoxChild)
+G_DEFINE_TYPE (GisSnapTile, gis_snap_tile, GTK_TYPE_FLOW_BOX_CHILD)
+
+static void
+gis_snap_tile_init (GisSnapTile *item)
+{
+}
+
+static void
+gis_snap_tile_finalize (GObject *object)
+{
+  g_clear_object (&GIS_SNAP_TILE (object)->snap);
+  g_clear_object (&GIS_SNAP_TILE (object)->soup_session);
+  G_OBJECT_CLASS (gis_snap_tile_parent_class)->finalize (object);
+}
+
+static void
+gis_snap_tile_class_init (GisSnapTileClass *klass)
+{
+  GObjectClass *object_class = G_OBJECT_CLASS (klass);
+
+  object_class->finalize = gis_snap_tile_finalize;
+}
+
+static void
+gis_apps_page_constructed (GObject *object)
+{
+  GisAppsPage *page = GIS_APPS_PAGE (object);
+
+  G_OBJECT_CLASS (gis_apps_page_parent_class)->constructed (object);
+
+  gis_page_set_skippable (GIS_PAGE (page), TRUE);
+
+  gis_page_set_complete (GIS_PAGE (page), TRUE);
+  gtk_widget_show (GTK_WIDGET (page));
+}
+
+static void
+gis_apps_page_dispose (GObject *object)
+{
+  GisAppsPage *page = GIS_APPS_PAGE (object);
+  GisAppsPagePrivate *priv = gis_apps_page_get_instance_private (page);
+
+  g_clear_object (&priv->client);
+  g_clear_object (&priv->soup_session);
+  g_clear_pointer (&priv->installed_snaps, g_ptr_array_unref);
+  g_clear_pointer (&priv->featured_snaps, g_ptr_array_unref);
+
+  if (priv->cancellable != NULL) {
+    g_cancellable_cancel (priv->cancellable);
+    g_clear_object (&priv->cancellable);
+  }
+
+  if (priv->featured_snaps_timeout_id != 0) {
+    g_source_remove (priv->featured_snaps_timeout_id);
+    priv->featured_snaps_timeout_id = 0;
+  }
+
+  G_OBJECT_CLASS (gis_apps_page_parent_class)->dispose (object);
+}
+
+static void
+open_software (GtkButton      *button,
+               const gchar    *uri,
+               GisAppsPage *page)
+{
+  g_autofree gchar *command = NULL;
+  g_autoptr(GAppInfo) info = NULL;
+  g_autoptr(GError) error = NULL;
+
+  g_autofree gchar *storecmd = NULL;
+
+  storecmd = g_find_program_in_path ("snap-store.ubuntu-software");
+  if (storecmd == NULL)
+    storecmd = g_find_program_in_path ("gnome-software");
+  if (storecmd == NULL) {
+    g_warning ("Failed to find snap-store or gnome-software");
+    return;
+  }
+
+  info = g_app_info_create_from_commandline (storecmd, NULL, G_APP_INFO_CREATE_NONE, &error);
+  if (info == NULL) {
+     g_warning ("Failed to get launch information from gnome-software: %s", error->message);
+     return;
+  }
+  if (!g_app_info_launch (info, NULL, NULL, &error)) {
+     g_warning ("Failed to launch gnome-software: %s", error->message);
+     return;
+  }
+}
+
+static gboolean
+gis_apps_page_apply (GisPage *page, GCancellable *cancellable)
+{
+  gis_ensure_stamp_files (GIS_PAGE (page)->driver);
+  gis_driver_quit (GIS_PAGE (page)->driver);
+  return FALSE;
+}
+
+static void
+gis_apps_page_locale_changed (GisPage *page)
+{
+  gis_page_set_title (GIS_PAGE (page), _("Ready to go"));
+}
+
+static void
+next_page (GtkWidget *stack, GtkWidget *prev_button, GtkWidget *next_button)
+{
+  GtkWidget *visible_child;
+  GList *children, *link;
+
+  visible_child = gtk_stack_get_visible_child (GTK_STACK (stack));
+  children = gtk_container_get_children (GTK_CONTAINER (stack));
+  for (link = children; link != NULL; link = link->next) {
+    GtkWidget *child = link->data;
+    if (child == visible_child) {
+      if (link->next == NULL)
+        return;
+
+      link = link->next;
+      gtk_stack_set_transition_type (GTK_STACK (stack), GTK_STACK_TRANSITION_TYPE_SLIDE_LEFT);
+      gtk_stack_set_visible_child (GTK_STACK (stack), link->data);
+      gtk_widget_set_sensitive (prev_button, TRUE);
+      gtk_widget_set_sensitive (next_button, link->next != NULL);
+      return;
+    }
+  }
+}
+
+static void
+prev_page (GtkWidget *stack, GtkWidget *prev_button, GtkWidget *next_button)
+{
+  GtkWidget *visible_child;
+  GList *children, *link;
+
+  visible_child = gtk_stack_get_visible_child (GTK_STACK (stack));
+  children = gtk_container_get_children (GTK_CONTAINER (stack));
+  for (link = children; link != NULL; link = link->next) {
+    GtkWidget *child = link->data;
+    if (child == visible_child) {
+      if (link->prev == NULL)
+        return;
+
+      link = link->prev;
+      gtk_stack_set_transition_type (GTK_STACK (stack), GTK_STACK_TRANSITION_TYPE_SLIDE_RIGHT);
+      gtk_stack_set_visible_child (GTK_STACK (stack), link->data);
+      gtk_widget_set_sensitive (prev_button, link->prev != NULL);
+      gtk_widget_set_sensitive (next_button, TRUE);
+      return;
+    }
+  }
+}
+
+static void
+prev_featured (GtkButton   *button,
+               GisAppsPage *page)
+{
+  GisAppsPagePrivate *priv = gis_apps_page_get_instance_private (page);
+  prev_page (priv->featured_stack, priv->prev_featured_button, priv->next_featured_button);
+}
+
+static void
+next_featured (GtkButton   *button,
+               GisAppsPage *page)
+{
+  GisAppsPagePrivate *priv = gis_apps_page_get_instance_private (page);
+  next_page (priv->featured_stack, priv->prev_featured_button, priv->next_featured_button);
+}
+
+static void
+gis_apps_page_class_init (GisAppsPageClass *klass)
+{
+  GisPageClass *page_class = GIS_PAGE_CLASS (klass);
+  GObjectClass *object_class = G_OBJECT_CLASS (klass);
+
+  gtk_widget_class_set_template_from_resource (GTK_WIDGET_CLASS (klass), "/org/gnome/initial-setup/gis-apps-page.ui");
+  gtk_widget_class_bind_template_child_private (GTK_WIDGET_CLASS (klass), GisAppsPage, main_stack);
+  gtk_widget_class_bind_template_child_private (GTK_WIDGET_CLASS (klass), GisAppsPage, spinner);
+  gtk_widget_class_bind_template_child_private (GTK_WIDGET_CLASS (klass), GisAppsPage, featured_stack);
+  gtk_widget_class_bind_template_child_private (GTK_WIDGET_CLASS (klass), GisAppsPage, prev_featured_button);
+  gtk_widget_class_bind_template_child_private (GTK_WIDGET_CLASS (klass), GisAppsPage, next_featured_button);
+  gtk_widget_class_bind_template_callback (GTK_WIDGET_CLASS (klass), open_software);
+  gtk_widget_class_bind_template_callback (GTK_WIDGET_CLASS (klass), prev_featured);
+  gtk_widget_class_bind_template_callback (GTK_WIDGET_CLASS (klass), next_featured);
+
+  page_class->page_id = PAGE_ID;
+  page_class->apply = gis_apps_page_apply;
+  page_class->locale_changed = gis_apps_page_locale_changed;
+  object_class->constructed = gis_apps_page_constructed;
+  object_class->dispose = gis_apps_page_dispose;
+}
+
+static GdkPixbuf *
+load_snap_icon (SnapdSnap *snap)
+{
+  const gchar *url;
+  g_autoptr(SnapdClient) client = NULL;
+  g_autoptr(SnapdIcon) icon = NULL;
+  g_autoptr(GInputStream) input_stream = NULL;
+  g_autoptr(GdkPixbuf) pixbuf = NULL;
+  g_autoptr(GError) error = NULL;
+
+  url = snapd_snap_get_icon (snap);
+  if (url == NULL || !g_str_has_prefix (url, "/v2/icons/"))
+    return NULL;
+
+  client = snapd_client_new ();
+  icon = snapd_client_get_icon_sync (client, snapd_snap_get_name (snap), NULL, &error);
+  if (icon == NULL) {
+     g_warning ("Failed to get snap icon: %s", error->message);
+     return NULL;
+  }
+  input_stream = g_memory_input_stream_new_from_bytes (snapd_icon_get_data (icon));
+  pixbuf = gdk_pixbuf_new_from_stream_at_scale (input_stream, 64, 64, TRUE, NULL, &error);
+  if (pixbuf == NULL) {
+     g_warning ("Failed to decode snap icon: %s", error->message);
+     return NULL;
+  }
+
+  return g_steal_pointer (&pixbuf);
+}
+
+static GdkPixbuf *
+load_local_icon (const gchar *name, GError **error)
+{
+  if (g_str_has_prefix (name, "/"))
+    return gdk_pixbuf_new_from_file_at_scale (name, 64, 64, TRUE, error);
+  else {
+    g_autoptr(GdkPixbuf) pixbuf = NULL;
+
+    pixbuf = gtk_icon_theme_load_icon (gtk_icon_theme_get_default (), name, 64, 0, error);
+    if (pixbuf == NULL)
+      return NULL;
+
+    if (gdk_pixbuf_get_width (pixbuf) == 64 && gdk_pixbuf_get_height (pixbuf) == 64)
+      return g_steal_pointer (&pixbuf);
+
+    return gdk_pixbuf_scale_simple (pixbuf, 64, 64, GDK_INTERP_BILINEAR);
+  }
+}
+
+static GdkPixbuf *
+load_desktop_icon (SnapdSnap *snap)
+{
+  GPtrArray *apps;
+  guint i;
+
+  apps = snapd_snap_get_apps (snap);
+  for (i = 0; i < apps->len; i++) {
+    SnapdApp *app = g_ptr_array_index (apps, i);
+    const gchar *desktop_file_path;
+    g_autoptr(GKeyFile) desktop_file = NULL;
+    g_autofree gchar *icon = NULL;
+    g_autoptr(GdkPixbuf) pixbuf = NULL;
+    g_autoptr(GError) error = NULL;
+
+    desktop_file_path = snapd_app_get_desktop_file (app);
+    if (desktop_file_path == NULL)
+      continue;
+
+    desktop_file = g_key_file_new ();
+    if (!g_key_file_load_from_file (desktop_file, desktop_file_path, G_KEY_FILE_NONE, &error)) {
+      g_warning ("Failed to load desktop file %s: %s", desktop_file_path, error->message);
+      continue;
+    }
+
+    icon = g_key_file_get_string (desktop_file, G_KEY_FILE_DESKTOP_GROUP, G_KEY_FILE_DESKTOP_KEY_ICON, &error);
+    if (icon == NULL) {
+      g_warning ("Failed to get desktop file icon %s: %s", desktop_file_path, error->message);
+      continue;
+    }
+
+    pixbuf = load_local_icon (icon, &error);
+    if (pixbuf == NULL) {
+      g_warning ("Failed to load icon %s: %s", icon, error->message);
+      continue;
+    }
+
+    return g_steal_pointer (&pixbuf);
+  }
+
+  return NULL;
+}
+
+static void
+icon_cb (GObject *object, GAsyncResult *result, gpointer user_data)
+{
+  GisSnapTile *tile = user_data;
+  g_autoptr(GInputStream) stream = NULL;
+  g_autoptr(GdkPixbuf) pixbuf = NULL;
+  g_autoptr(GError) error = NULL;
+
+  stream = soup_session_send_finish (SOUP_SESSION (object), result, &error);
+  if (stream == NULL) {
+    g_warning ("Failed to download icon: %s", error->message);
+    return;
+  }
+
+  pixbuf = gdk_pixbuf_new_from_stream_at_scale (stream, 64, 64, TRUE, NULL, &error);
+  if (pixbuf == NULL) {
+    g_warning ("Failed to load icon: %s", error->message);
+    return;
+  }
+
+  gtk_image_set_from_pixbuf (GTK_IMAGE (tile->icon), pixbuf);
+}
+
+static void
+load_store_icon (GisSnapTile *tile)
+{
+  const gchar *url;
+  g_autoptr(SoupMessage) message = NULL;
+
+  url = snapd_snap_get_icon (tile->snap);
+  if (url == NULL || !(g_str_has_prefix (url, "http://") || g_str_has_prefix (url, "https://")))
+    return;
+
+  message = soup_message_new ("GET", url);
+  soup_session_send_async (tile->soup_session, message, NULL, icon_cb, tile);
+}
+
+static void
+load_icon (GisSnapTile *tile)
+{
+  g_autoptr(GdkPixbuf) pixbuf = NULL;
+  g_autoptr(GError) error = NULL;
+
+  pixbuf = load_snap_icon (tile->snap);
+  if (pixbuf != NULL) {
+    gtk_image_set_from_pixbuf (GTK_IMAGE (tile->icon), pixbuf);
+    return;
+  }
+
+  pixbuf = load_desktop_icon (tile->snap);
+  if (pixbuf != NULL) {
+    gtk_image_set_from_pixbuf (GTK_IMAGE (tile->icon), pixbuf);
+    return;
+  }
+
+  /* Add placeholder icon */
+  pixbuf = gdk_pixbuf_new_from_resource_at_scale ("/org/gnome/initial-setup/default-snap-icon.svg", 64, 64, TRUE, &error);
+  if (pixbuf != NULL)
+    gtk_image_set_from_pixbuf (GTK_IMAGE (tile->icon), pixbuf);
+
+  load_store_icon (tile);
+}
+
+static GtkWidget *
+gis_snap_tile_new (SnapdSnap *snap, SoupSession *soup_session)
+{
+  const gchar *title;
+  GisSnapTile *tile;
+  GtkWidget *box, *label;
+
+  tile = g_object_new (gis_snap_tile_get_type (), NULL);
+  tile->snap = g_object_ref (snap);
+  tile->soup_session = g_object_ref (soup_session);
+
+  title = snapd_snap_get_title (snap);
+  if (title == NULL)
+    title = snapd_snap_get_name (snap);
+
+  box = gtk_box_new (GTK_ORIENTATION_VERTICAL, 6);
+  gtk_widget_show (box);
+  gtk_container_add (GTK_CONTAINER (tile), box);
+
+  tile->icon = gtk_image_new ();
+  gtk_widget_show (tile->icon);
+  gtk_box_pack_start (GTK_BOX (box), tile->icon, FALSE, TRUE, 0);
+
+  label = gtk_label_new (title);
+  gtk_widget_show (label);
+  gtk_label_set_line_wrap (GTK_LABEL (label), TRUE);
+  gtk_box_pack_start (GTK_BOX (box), label, TRUE, TRUE, 0);
+
+  load_icon (tile);
+
+  return GTK_WIDGET (tile);
+}
+
+static gboolean
+contains_snap (GPtrArray *snaps, const gchar *name)
+{
+  guint i;
+
+  for (i = 0; i < snaps->len; i++) {
+    SnapdSnap *snap = g_ptr_array_index (snaps, i);
+    if (g_strcmp0 (snapd_snap_get_name (snap), name) == 0)
+      return TRUE;
+  }
+
+  return FALSE;
+}
+
+static void
+on_app_clicked (GtkWidget *flow_box, GtkFlowBoxChild *child, gpointer user_data)
+{
+  GisSnapTile *tile = NULL;
+  g_autofree gchar *url = NULL;
+  g_autoptr (GError) error = NULL;
+
+  if (!GIS_IS_SNAP_TILE (child))
+      return;
+
+  tile = GIS_SNAP_TILE (child);
+
+  url = g_strdup_printf ("snap://%s", snapd_snap_get_name (tile->snap));
+  if (!g_app_info_launch_default_for_uri (url, NULL, &error))
+     g_warning ("Failed to open %s: %s", url, error->message);
+}
+
+static void
+add_tile (GtkWidget *stack, GtkWidget *tile)
+{
+  GList *children;
+  GtkWidget *flow_box = NULL;
+  gint count = 0;
+
+  children = gtk_container_get_children (GTK_CONTAINER (stack));
+  if (children != NULL) {
+    flow_box = g_list_last (children)->data;
+    count = g_list_length (gtk_container_get_children (GTK_CONTAINER (flow_box)));
+  }
+  if (flow_box == NULL || count >= 15) {
+    count = 0;
+    flow_box = gtk_flow_box_new ();
+    gtk_flow_box_set_min_children_per_line (GTK_FLOW_BOX (flow_box), 5);
+    gtk_flow_box_set_max_children_per_line (GTK_FLOW_BOX (flow_box), 5);
+    gtk_flow_box_set_selection_mode (GTK_FLOW_BOX (flow_box), GTK_SELECTION_NONE);
+    g_signal_connect (flow_box, "child-activated",
+                      G_CALLBACK (on_app_clicked), NULL);
+    gtk_widget_show (flow_box);
+    gtk_flow_box_set_row_spacing (GTK_FLOW_BOX (flow_box), 10);
+    gtk_flow_box_set_column_spacing (GTK_FLOW_BOX (flow_box), 10);
+    gtk_container_add (GTK_CONTAINER (stack), flow_box);
+  }
+
+  gtk_container_add (GTK_CONTAINER (flow_box), tile);
+}
+
+static void
+gis_app_page_populate_featured_snaps (GisAppsPage *page)
+{
+    GisAppsPagePrivate *priv = gis_apps_page_get_instance_private (page);
+    GtkSizeGroup *size_group;
+    guint i, n_tiles = 0, n_extra = 0;
+
+    size_group = gtk_size_group_new (GTK_SIZE_GROUP_BOTH);
+
+    for (i = 0; i < priv->featured_snaps->len; i++) {
+      SnapdSnap *snap = g_ptr_array_index (priv->featured_snaps, i);
+      GtkWidget *tile;
+
+      /* Skip if already installed */
+      if (priv->installed_snaps != NULL && contains_snap (priv->installed_snaps, snapd_snap_get_name (snap)))
+        continue;
+
+      /* Ignore common snaps that have default .debs */
+      if (g_strcmp0 (snapd_snap_get_name (snap), "firefox") == 0)
+        continue;
+
+      tile = gis_snap_tile_new (snap, priv->soup_session);
+      gtk_widget_show (tile);
+      gtk_size_group_add_widget (size_group, tile);
+
+      add_tile (priv->featured_stack, tile);
+      n_tiles += 1;
+    }
+
+    /* Add spacers to fill up page */
+    if (n_tiles % 15 != 0)
+      n_extra = 15 - n_tiles % 15;
+    for (i = 0; i < n_extra; i++) {
+      GtkWidget *spacer = gtk_label_new ("");
+      gtk_widget_show (spacer);
+      gtk_size_group_add_widget (size_group, spacer);
+      add_tile (priv->featured_stack, spacer);
+    }
+
+    gtk_widget_set_visible (priv->next_featured_button, g_list_length (gtk_container_get_children (GTK_CONTAINER (priv->featured_stack))) > 1);
+    gtk_widget_set_visible (priv->prev_featured_button, g_list_length (gtk_container_get_children (GTK_CONTAINER (priv->featured_stack))) > 1);
+}
+
+static void
+gis_apps_page_try_to_get_featured_snaps (GisAppsPage *page);
+
+static void
+gis_app_page_on_featured_snaps_ready (GObject *source_object,
+                                      GAsyncResult *res,
+                                      gpointer user_data)
+{
+  SnapdClient *client = SNAPD_CLIENT (source_object);
+  g_autoptr(GPtrArray) featured_snaps = NULL;
+  g_autoptr(GError) error = NULL;
+
+  featured_snaps = snapd_client_find_section_finish (client, res, NULL, &error);
+
+  if (featured_snaps == NULL) {
+    if (!g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED)) {
+      g_warning ("Failed to get featured snaps: %s", error->message);
+      /* On a fresh boot interacting with snapd can fail (see LP: #1824188).
+       * In case of error, try to get the featured snaps again.*/
+      gis_apps_page_try_to_get_featured_snaps (GIS_APPS_PAGE (user_data));
+    }
+  } else {
+    GisAppsPage *page = GIS_APPS_PAGE (user_data);
+    GisAppsPagePrivate *priv = gis_apps_page_get_instance_private (page);
+
+    priv->featured_snaps = g_steal_pointer (&featured_snaps);
+
+    gtk_spinner_stop (GTK_SPINNER (priv->spinner));
+    gtk_stack_set_visible_child_name (GTK_STACK (priv->main_stack), "page_snaps");
+
+    gis_app_page_populate_featured_snaps (page);
+  }
+}
+
+static gboolean
+gis_app_page_get_featured_snaps_timeout (gpointer user_data)
+{
+  GisAppsPage *page = GIS_APPS_PAGE (user_data);
+  GisAppsPagePrivate *priv = gis_apps_page_get_instance_private (page);
+
+  priv->featured_snaps_timeout_id = 0;
+
+  snapd_client_find_section_async (priv->client,
+                                   SNAPD_FIND_FLAGS_NONE,
+                                   "ubuntu-firstrun",
+                                   NULL,
+                                   priv->cancellable,
+                                   gis_app_page_on_featured_snaps_ready,
+                                   page);
+
+  return G_SOURCE_REMOVE;
+}
+
+void
+gis_apps_page_try_to_get_featured_snaps (GisAppsPage *page)
+{
+  GisAppsPagePrivate *priv = gis_apps_page_get_instance_private (page);
+
+  g_return_if_fail (priv->featured_snaps == NULL);
+
+  if (priv->featured_snaps_timeout_id == 0)
+    priv->featured_snaps_timeout_id = g_timeout_add_seconds (1, gis_app_page_get_featured_snaps_timeout, page);
+}
+
+void
+gis_app_page_on_installed_snaps_ready (GObject *source_object,
+                                       GAsyncResult *res,
+                                       gpointer user_data)
+{
+  GisAppsPage *page;
+  GisAppsPagePrivate *priv;
+  SnapdClient *client = SNAPD_CLIENT (source_object);
+  g_autoptr(GPtrArray) installed_snaps = NULL;
+  g_autoptr(GError) error = NULL;
+
+  installed_snaps = snapd_client_get_snaps_finish (client, res, &error);
+  if (installed_snaps == NULL) {
+    if (!g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED)) {
+      /* Discard errors in getting the list of installed snaps. Print out a
+       * warning here and avoid to use installed_snaps to filter the featured
+       * snaps. */
+      g_warning ("Failed to get installed snaps: %s", error->message);
+    } else {
+      return;
+    }
+  }
+
+  page = GIS_APPS_PAGE (user_data);
+  priv = gis_apps_page_get_instance_private (page);
+
+  priv->installed_snaps = g_steal_pointer (&installed_snaps);
+  gis_apps_page_try_to_get_featured_snaps (page);
+}
+
+static void
+gis_apps_page_init (GisAppsPage *page)
+{
+  GisAppsPagePrivate *priv = gis_apps_page_get_instance_private (page);
+
+  g_resources_register (apps_get_resource ());
+
+  gtk_widget_init_template (GTK_WIDGET (page));
+
+  priv->soup_session = soup_session_new ();
+  priv->client = snapd_client_new ();
+  priv->cancellable = g_cancellable_new ();
+
+  gtk_stack_set_visible_child_name (GTK_STACK (priv->main_stack), "page_spinner");
+  gtk_spinner_start (GTK_SPINNER (priv->spinner));
+
+  snapd_client_get_snaps_async (priv->client,
+                                SNAPD_GET_SNAPS_FLAGS_NONE,
+                                NULL,
+                                priv->cancellable,
+                                gis_app_page_on_installed_snaps_ready,
+                                page);
+}
+
+GisPage *
+gis_prepare_apps_page (GisDriver *driver)
+{
+  return g_object_new (GIS_TYPE_APPS_PAGE,
+                       "driver", driver,
+                       NULL);
+}
diff --git a/gnome-initial-setup/pages/apps/gis-apps-page.h b/gnome-initial-setup/pages/apps/gis-apps-page.h
new file mode 100644
index 0000000..9494b9e
--- /dev/null
+++ b/gnome-initial-setup/pages/apps/gis-apps-page.h
@@ -0,0 +1,52 @@
+/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
+/*
+ * Copyright (C) 2018 Canonical Ltd.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef __GIS_APPS_PAGE_H__
+#define __GIS_APPS_PAGE_H__
+
+#include "gnome-initial-setup.h"
+
+G_BEGIN_DECLS
+
+#define GIS_TYPE_APPS_PAGE            (gis_apps_page_get_type ())
+#define GIS_APPS_PAGE(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GIS_TYPE_APPS_PAGE, GisAppsPage))
+#define GIS_APPS_PAGE_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass),  GIS_TYPE_APPS_PAGE, GisAppsPageClass))
+#define GIS_IS_APPS_PAGE(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GIS_TYPE_APPS_PAGE))
+#define GIS_IS_APPS_PAGE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass),  GIS_TYPE_APPS_PAGE))
+#define GIS_APPS_PAGE_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj),  GIS_TYPE_APPS_PAGE, GisAppsPageClass))
+
+typedef struct _GisAppsPage        GisAppsPage;
+typedef struct _GisAppsPageClass   GisAppsPageClass;
+
+struct _GisAppsPage
+{
+  GisPage parent;
+};
+
+struct _GisAppsPageClass
+{
+  GisPageClass parent_class;
+};
+
+GType gis_apps_page_get_type (void);
+
+GisPage *gis_prepare_apps_page (GisDriver *driver);
+
+G_END_DECLS
+
+#endif /* __GIS_APPS_PAGE_H__ */
diff --git a/gnome-initial-setup/pages/apps/gis-apps-page.ui b/gnome-initial-setup/pages/apps/gis-apps-page.ui
new file mode 100644
index 0000000..5944539
--- /dev/null
+++ b/gnome-initial-setup/pages/apps/gis-apps-page.ui
@@ -0,0 +1,111 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<interface>
+  <!-- interface-requires gtk+ 3.0 -->
+  <template class="GisAppsPage" parent="GisPage">
+    <child>
+      <object class="GtkBox">
+        <property name="visible">True</property>
+        <property name="halign">fill</property>
+        <property name="valign">fill</property>
+        <property name="orientation">vertical</property>
+        <property name="border_width">20</property>
+        <child>
+          <object class="GtkLabel" id="title">
+            <property name="visible">True</property>
+            <property name="halign">start</property>
+            <property name="valign">start</property>
+            <property name="label" translatable="yes">You're ready to go!</property>
+            <attributes>
+              <attribute name="weight" value="bold"/>
+              <attribute name="scale" value="1.8"/>
+            </attributes>
+          </object>
+        </child>
+        <child>
+          <object class="GtkLabel">
+            <property name="visible">True</property>
+            <property name="halign">start</property>
+            <property name="margin_top">36</property>
+            <property name="label" translatable="yes">You can use “Software” to install apps like these:</property>
+            <attributes>
+              <attribute name="weight" value="bold"/>
+            </attributes>
+            <property name="wrap">True</property>
+          </object>
+        </child>
+        <child>
+          <object class="GtkStack" id="main_stack">
+            <property name="visible">True</property>
+            <property name="margin_top">18</property>
+            <property name="hexpand">True</property>
+            <property name="transition_type">crossfade</property>
+            <child>
+              <object class="GtkSpinner" id="spinner">
+                <property name="visible">True</property>
+              </object>
+              <packing>
+                <property name="name">page_spinner</property>
+              </packing>
+            </child>
+            <child>
+              <object class="GtkBox">
+                <property name="visible">True</property>
+                <property name="orientation">horizontal</property>
+                <property name="hexpand">True</property>
+                <property name="margin_top">36</property>
+                <property name="spacing">10</property>
+                <child>
+                  <object class="GtkButton" id="prev_featured_button">
+                    <property name="sensitive">False</property>
+                    <property name="relief">none</property>
+                    <signal name="clicked" handler="prev_featured"/>
+                    <child>
+                      <object class="GtkImage">
+                        <property name="visible">True</property>
+                        <property name="icon_name">go-previous-symbolic</property>
+                      </object>
+                    </child>
+                  </object>
+                </child>
+                <child>
+                  <object class="GtkStack" id="featured_stack">
+                    <property name="visible">True</property>
+                    <property name="hexpand">True</property>
+                  </object>
+                </child>
+                <child>
+                  <object class="GtkButton" id="next_featured_button">
+                    <property name="sensitive">True</property>
+                    <property name="relief">none</property>
+                    <signal name="clicked" handler="next_featured"/>
+                    <child>
+                      <object class="GtkImage">
+                        <property name="visible">True</property>
+                        <property name="icon_name">go-next-symbolic</property>
+                      </object>
+                    </child>
+                  </object>
+                </child>
+              </object>
+              <packing>
+                <property name="name">page_snaps</property>
+              </packing>
+            </child>
+          </object>
+        </child>
+        <child>
+          <object class="GtkButton">
+            <property name="visible">True</property>
+            <property name="margin_top">18</property>
+            <property name="halign">start</property>
+            <property name="label" translatable="yes">Open “Software” now</property>
+            <signal name="clicked" handler="open_software"/>
+          </object>
+          <packing>
+            <property name="pack-type">end</property>
+          </packing>
+        </child>
+      </object>
+    </child>
+  </template>
+</interface>
diff --git a/gnome-initial-setup/pages/apps/meson.build b/gnome-initial-setup/pages/apps/meson.build
new file mode 100644
index 0000000..dec2b38
--- /dev/null
+++ b/gnome-initial-setup/pages/apps/meson.build
@@ -0,0 +1,10 @@
+sources += gnome.compile_resources(
+    'apps-resources',
+    files('apps.gresource.xml'),
+    c_name: 'apps'
+)
+
+sources += files(
+    'gis-apps-page.c',
+    'gis-apps-page.h',
+)
diff --git a/gnome-initial-setup/pages/livepatch/gis-auth-dialog.c b/gnome-initial-setup/pages/livepatch/gis-auth-dialog.c
new file mode 100644
index 0000000..eceb26e
--- /dev/null
+++ b/gnome-initial-setup/pages/livepatch/gis-auth-dialog.c
@@ -0,0 +1,528 @@
+/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
+/*
+ * Copyright (C) 2018 Canonical Ltd.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see <http://www.gnu.org/licenses/>.
+ *
+ * Written by:
+ *     Andrea Azzarone <andrea.azzarone@canonical.com>
+ */
+
+#include "gis-auth-dialog.h"
+
+#include <glib/gi18n.h>
+#define GOA_API_IS_SUBJECT_TO_CHANGE
+#include <goa/goa.h>
+#define GOA_BACKEND_API_IS_SUBJECT_TO_CHANGE
+#include <goabackend/goabackend.h>
+
+struct _GisAuthDialog
+{
+  GtkDialog parent_instance;
+
+  GoaClient *goa_client;
+  GtkListStore *liststore_account;
+
+  GtkWidget *error_bar;
+  GtkWidget *label_error;
+  GtkWidget *label_header;
+  GtkWidget *combobox_account;
+  GtkWidget *label_account;
+  GtkWidget *button_add_another;
+  GtkWidget *button_cancel;
+  GtkWidget *button_continue;
+
+  GCancellable *cancellable;
+  guint error_timeout;
+};
+
+static void gis_auth_dialog_initable_iface_init (GInitableIface *iface);
+
+G_DEFINE_TYPE_WITH_CODE (GisAuthDialog, gis_auth_dialog, GTK_TYPE_DIALOG,
+                         G_IMPLEMENT_INTERFACE (G_TYPE_INITABLE, gis_auth_dialog_initable_iface_init))
+
+enum {
+  COLUMN_ID,
+  COLUMN_EMAIL,
+  COLUMN_ACCOUNT,
+  N_COLUMNS
+};
+
+static gboolean
+gis_auth_dialog_ignore_account (GoaAccount *account)
+{
+  return g_strcmp0 (goa_account_get_provider_type (account), "ubuntusso") != 0;
+}
+
+static void gis_auth_dialog_set_error (GisAuthDialog *self,
+                                       const gchar *text);
+
+static gboolean
+gis_auth_dialog_error_timeout_cb (GisAuthDialog *self)
+{
+  /* Hide the error bar */
+  gis_auth_dialog_set_error (self, NULL);
+  return G_SOURCE_REMOVE;
+}
+
+static void
+gis_auth_dialog_set_error (GisAuthDialog *self,
+                           const gchar *text)
+{
+  /* Reset current error timeout */
+  if (self->error_timeout > 0) {
+    g_source_remove (self->error_timeout);
+    self->error_timeout = 0;
+  }
+
+  if (!text) {
+    /* Hide the error bar if text is NULL */
+    gtk_info_bar_set_revealed (GTK_INFO_BAR (self->error_bar), FALSE);
+    gtk_widget_set_visible (self->error_bar, FALSE);
+  } else {
+    /* Reveal the error bar if text is not NULL */
+    g_autofree gchar *markup = NULL;
+    markup = g_strdup_printf (_("Failed to add an Ubuntu Single Sign-on account: %s."), text);
+    gtk_label_set_markup (GTK_LABEL (self->label_error), markup);
+    gtk_widget_set_visible (self->error_bar, TRUE);
+    gtk_info_bar_set_revealed (GTK_INFO_BAR (self->error_bar), TRUE);
+    self->error_timeout = g_timeout_add_seconds (10, (GSourceFunc) gis_auth_dialog_error_timeout_cb, self);
+  }
+}
+
+static void
+gis_auth_dialog_set_header (GisAuthDialog *self,
+                            const gchar *text)
+{
+  g_autofree gchar *markup = NULL;
+  markup = g_strdup_printf ("<span size='larger' weight='bold'>%s</span>", text);
+  gtk_label_set_markup (GTK_LABEL (self->label_header), markup);
+}
+
+static gint
+gis_auth_dialog_get_naccounts (GisAuthDialog *self)
+{
+  return gtk_tree_model_iter_n_children (GTK_TREE_MODEL (self->liststore_account), NULL);
+}
+
+static gboolean
+gis_auth_dialog_get_nth_account_data (GisAuthDialog *self,
+                                      gint n,
+                                      ...)
+{
+  GtkTreeIter iter;
+  va_list var_args;
+
+  if (!gtk_tree_model_iter_nth_child (GTK_TREE_MODEL (self->liststore_account), &iter, NULL, n))
+    return FALSE;
+
+  va_start (var_args, n);
+  gtk_tree_model_get_valist (GTK_TREE_MODEL (self->liststore_account), &iter, var_args);
+  va_end (var_args);
+
+  return TRUE;
+}
+
+static void
+gis_auth_dialog_check_ui (GisAuthDialog *self,
+                          gboolean select)
+{
+  gint naccounts = gis_auth_dialog_get_naccounts (self);
+
+  if (naccounts == 0) {
+    gis_auth_dialog_set_header (self, _("To use Livepatch, you need to use an Ubuntu One Account."));
+    gtk_widget_set_visible (self->combobox_account, FALSE);
+    gtk_widget_set_visible (self->label_account, FALSE);
+    gtk_widget_set_visible (self->button_add_another, FALSE);
+    gtk_button_set_label (GTK_BUTTON (self->button_continue), _("Sign In / Register…"));
+  } else if (naccounts == 1) {
+    g_autofree gchar *email = NULL;
+
+    gis_auth_dialog_set_header (self, _("To use Livepatch, you need to use your Ubuntu One Account."));
+    gtk_widget_set_visible (self->combobox_account, FALSE);
+    gtk_widget_set_visible (self->label_account, TRUE);
+    gtk_widget_set_visible (self->button_add_another, TRUE);
+    gtk_button_set_label (GTK_BUTTON (self->button_continue), _("Continue"));
+    gis_auth_dialog_get_nth_account_data (self, 0, COLUMN_EMAIL, &email, -1);
+    gtk_label_set_text (GTK_LABEL (self->label_account), email);
+  } else {
+    gis_auth_dialog_set_header (self, _("To use Livepatch, you need to use an Ubuntu One Account."));
+    gtk_widget_set_visible (self->combobox_account, TRUE);
+    gtk_widget_set_visible (self->label_account, FALSE);
+    gtk_widget_set_visible (self->button_add_another, TRUE);
+    gtk_button_set_label (GTK_BUTTON (self->button_continue), _("Use"));
+
+    if (select) {
+      gtk_combo_box_set_active (GTK_COMBO_BOX (self->combobox_account), naccounts - 1);
+    } else if (gtk_combo_box_get_active (GTK_COMBO_BOX (self->combobox_account)) == -1) {
+      gtk_combo_box_set_active (GTK_COMBO_BOX (self->combobox_account), 0);
+    }
+  }
+}
+
+static gboolean
+gis_auth_dialog_get_account_iter (GisAuthDialog *self,
+                                  GoaAccount *account,
+                                  GtkTreeIter *iter)
+{
+  gboolean valid;
+
+  valid = gtk_tree_model_iter_nth_child (GTK_TREE_MODEL (self->liststore_account), iter, NULL, 0);
+
+  while (valid) {
+    g_autofree gchar *id;
+    gtk_tree_model_get (GTK_TREE_MODEL (self->liststore_account), iter, COLUMN_ID, &id, -1);
+    if (g_strcmp0 (id, goa_account_get_id (account)) == 0)
+      return TRUE;
+    else
+      valid = gtk_tree_model_iter_next (GTK_TREE_MODEL (self->liststore_account), iter);
+  }
+
+  return FALSE;
+}
+
+static void
+gis_auth_dialog_add_account (GisAuthDialog *self,
+                             GoaAccount *account,
+                             gboolean select)
+{
+  GtkTreeIter iter;
+
+  if (gis_auth_dialog_ignore_account (account) ||
+      gis_auth_dialog_get_account_iter (self, account, &iter))
+    return;
+
+  gtk_list_store_append (self->liststore_account, &iter);
+  gtk_list_store_set (self->liststore_account, &iter,
+                      COLUMN_ID, goa_account_get_id (account),
+                      COLUMN_EMAIL, goa_account_get_presentation_identity (account),
+                      COLUMN_ACCOUNT, account,
+                      -1);
+
+  gis_auth_dialog_check_ui (self, select);
+}
+
+static void
+gis_auth_dialog_remove_account (GisAuthDialog *self,
+                                GoaAccount *account)
+{
+  GtkTreeIter iter;
+
+  if (gis_auth_dialog_ignore_account (account) ||
+     !gis_auth_dialog_get_account_iter (self, account, &iter))
+    return;
+
+  gtk_list_store_remove (self->liststore_account, &iter);
+  gis_auth_dialog_check_ui (self, FALSE);
+}
+
+static void
+gis_auth_dialog_setup_model (GisAuthDialog *self)
+{
+  g_autoptr(GList) accounts = goa_client_get_accounts (self->goa_client);
+
+  for (GList *l = accounts; l != NULL; l = l->next) {
+    gis_auth_dialog_add_account (self,  goa_object_peek_account (l->data), FALSE);
+    g_object_unref (l->data);
+  }
+}
+
+static GoaAccount*
+gis_auth_dialog_show_sso (GisAuthDialog *self,
+                          GoaAccount *account)
+{
+  g_autoptr(GoaProvider) provider = NULL;
+  g_autoptr(GError) error = NULL;
+  GoaObject *goa_object = NULL;
+  GoaAccount *ret = NULL;
+
+  /* Check if ubuntusso accounts are supported */
+  provider = goa_provider_get_for_provider_type ("ubuntusso");
+  if (provider == NULL) {
+    gis_auth_dialog_set_error (self, _("Ubuntu Single Sign-on accounts are not supported"));
+    goto out;
+  }
+
+  if (!account) {
+    GtkWidget *dialog = NULL;
+    /* Show the login dialog */
+    dialog = gtk_dialog_new_with_buttons (_("Add Account"),
+                                          GTK_WINDOW (self),
+                                          GTK_DIALOG_MODAL
+                                          | GTK_DIALOG_DESTROY_WITH_PARENT
+                                          | GTK_DIALOG_USE_HEADER_BAR,
+                                          NULL, NULL);
+
+    /* Set dialog to not resize. */
+    gtk_window_set_resizable (GTK_WINDOW (dialog), FALSE);
+
+    goa_object = goa_provider_add_account (provider,
+                                           self->goa_client,
+                                           GTK_DIALOG (dialog),
+                                           GTK_BOX (gtk_dialog_get_content_area (GTK_DIALOG (dialog))),
+                                           &error);
+
+    gtk_widget_destroy (dialog);
+  } else {
+    /* Show the refresh dialog */
+    goa_object = goa_client_lookup_by_id (self->goa_client, goa_account_get_id (account));
+    goa_provider_refresh_account (provider,
+                                  self->goa_client,
+                                  goa_object,
+                                  GTK_WINDOW (self),
+                                  &error);
+  }
+
+  if (error) {
+    if (!g_error_matches (error, GOA_ERROR, GOA_ERROR_DIALOG_DISMISSED))
+      gis_auth_dialog_set_error (self, error->message);
+    goto out;
+  }
+
+  ret = goa_object_get_account (goa_object);
+
+ out:
+  g_clear_object (&goa_object);
+  return ret;
+}
+
+static GoaAccount*
+gis_auth_dialog_get_selected_account (GisAuthDialog *self)
+{
+  GoaAccount *goa_account = NULL;
+  gint naccounts = gis_auth_dialog_get_naccounts (self);
+
+  if (naccounts == 1) {
+    gis_auth_dialog_get_nth_account_data (self, 0, COLUMN_ACCOUNT, &goa_account, -1);
+  } else  if (naccounts > 1) {
+    gint active = gtk_combo_box_get_active (GTK_COMBO_BOX (self->combobox_account));
+    gis_auth_dialog_get_nth_account_data (self, active, COLUMN_ACCOUNT, &goa_account, -1);
+  }
+
+  return goa_account;
+}
+
+void
+gis_auth_dialog_ensure_crendentials_cb (GObject *source_object,
+                                        GAsyncResult *res,
+                                        gpointer user_data)
+{
+  GisAuthDialog *self = (GisAuthDialog*) user_data;
+  GoaAccount *account = GOA_ACCOUNT (source_object);
+  g_autoptr(GError) error = NULL;
+
+  if (!goa_account_call_ensure_credentials_finish (account, NULL, res, &error)) {
+    if (g_error_matches (error, GOA_ERROR, GOA_ERROR_NOT_AUTHORIZED)) {
+      /* Show the refresh account is credentials are expired */
+      account = gis_auth_dialog_show_sso (self, account);
+      /* account is NULL in case of error or dismissal */
+      if (account != NULL) {
+        gtk_dialog_response (GTK_DIALOG (self), GTK_RESPONSE_OK);
+        g_object_unref (account);
+      }
+    }
+  } else {
+    gtk_dialog_response (GTK_DIALOG (self), GTK_RESPONSE_OK);
+  }
+}
+
+static void
+gis_auth_dialog_response_if_valid (GisAuthDialog *self)
+{
+  GoaAccount *goa_account = gis_auth_dialog_get_selected_account (self);
+
+  if (goa_account)
+    goa_account_call_ensure_credentials (goa_account,
+                                         self->cancellable,
+                                         gis_auth_dialog_ensure_crendentials_cb,
+                                         self);
+
+  g_clear_object (&goa_account);
+}
+
+static void
+gis_auth_dialog_account_added_cb (GoaClient *client,
+                                  GoaObject *object,
+                                  GisAuthDialog *self)
+{
+  GoaAccount *account = goa_object_peek_account (object);
+  gis_auth_dialog_add_account (self, account, FALSE);
+}
+
+static void
+gis_auth_dialog_account_removed_cb (GoaClient *client,
+                                    GoaObject *object,
+                                    GisAuthDialog *self)
+{
+  GoaAccount *account = goa_object_peek_account (object);
+  gis_auth_dialog_remove_account (self, account);
+}
+
+static void
+gis_auth_dialog_button_add_another_cb (GtkButton *button,
+                                       GisAuthDialog *self)
+{
+  GoaAccount *account;
+
+  g_signal_handlers_block_by_func (self->goa_client, gis_auth_dialog_account_added_cb, self);
+
+  account = gis_auth_dialog_show_sso (self, NULL);
+
+   /* account is NULL in case of error or dismissal */
+  if (account != NULL) {
+    gis_auth_dialog_add_account (self, account, TRUE);
+    gis_auth_dialog_response_if_valid (self);
+    g_object_unref (account);
+  }
+
+  g_signal_handlers_unblock_by_func (self->goa_client, gis_auth_dialog_account_added_cb, self);
+}
+
+static void
+gis_auth_dialog_button_cancel_cb (GtkButton *button,
+                                  GisAuthDialog *self)
+{
+  gtk_dialog_response (GTK_DIALOG (self), GTK_RESPONSE_CANCEL);
+}
+
+static void
+gis_auth_dialog_button_continue_cb (GtkButton     *button,
+                                    GisAuthDialog *self)
+{
+  gint naccounts = gis_auth_dialog_get_naccounts (self);
+
+  if (naccounts == 0)
+    gis_auth_dialog_button_add_another_cb (GTK_BUTTON (self->button_add_another), self);
+  else
+    gis_auth_dialog_response_if_valid (self);
+}
+
+/* GObject */
+
+static void
+gis_auth_dialog_dispose (GObject *object)
+{
+  GisAuthDialog *self = GIS_AUTH_DIALOG (object);
+
+  g_clear_object (&self->goa_client);
+
+  if (self->error_timeout > 0) {
+    g_source_remove (self->error_timeout);
+    self->error_timeout = 0;
+  }
+
+  g_cancellable_cancel (self->cancellable);
+  g_clear_object (&self->cancellable);
+
+  G_OBJECT_CLASS (gis_auth_dialog_parent_class)->dispose (object);
+}
+
+static void
+gis_auth_dialog_class_init (GisAuthDialogClass *klass)
+{
+  GObjectClass *object_class = G_OBJECT_CLASS (klass);
+  GtkWidgetClass *widget_class = GTK_WIDGET_CLASS (klass);
+
+  object_class->dispose = gis_auth_dialog_dispose;
+
+  gtk_widget_class_set_template_from_resource (widget_class, "/org/gnome/initial-setup/gis-auth-dialog.ui");
+
+  gtk_widget_class_bind_template_child (widget_class, GisAuthDialog, error_bar);
+  gtk_widget_class_bind_template_child (widget_class, GisAuthDialog, label_error);
+  gtk_widget_class_bind_template_child (widget_class, GisAuthDialog, label_header);
+  gtk_widget_class_bind_template_child (widget_class, GisAuthDialog, combobox_account);
+  gtk_widget_class_bind_template_child (widget_class, GisAuthDialog, label_account);
+  gtk_widget_class_bind_template_child (widget_class, GisAuthDialog, button_add_another);
+  gtk_widget_class_bind_template_child (widget_class, GisAuthDialog, button_cancel);
+  gtk_widget_class_bind_template_child (widget_class, GisAuthDialog, button_continue);
+  gtk_widget_class_bind_template_child (widget_class, GisAuthDialog, liststore_account);
+
+
+  gtk_widget_class_bind_template_callback (GTK_WIDGET_CLASS (klass), gis_auth_dialog_button_add_another_cb);
+  gtk_widget_class_bind_template_callback (GTK_WIDGET_CLASS (klass), gis_auth_dialog_button_cancel_cb);
+  gtk_widget_class_bind_template_callback (GTK_WIDGET_CLASS (klass), gis_auth_dialog_button_continue_cb);
+}
+
+static void
+gis_auth_dialog_init (GisAuthDialog *self)
+{
+  self->cancellable = g_cancellable_new ();
+
+  gtk_widget_init_template (GTK_WIDGET (self));
+  gtk_widget_grab_focus (self->button_continue);
+}
+
+/* GInitable */
+
+static gboolean
+gis_auth_dialog_initable_init (GInitable *initable,
+                               GCancellable *cancellable,
+                               GError  **error)
+{
+  GisAuthDialog *self;
+
+  g_return_val_if_fail (GIS_IS_AUTH_DIALOG (initable), FALSE);
+
+  self = GIS_AUTH_DIALOG (initable);
+
+  self->goa_client = goa_client_new_sync (NULL, error);
+  if (!self->goa_client)
+    return FALSE;
+
+  gis_auth_dialog_setup_model (self);
+  gis_auth_dialog_check_ui (self, FALSE);
+
+  /* Be ready to other accounts */
+  g_signal_connect (self->goa_client, "account-added", G_CALLBACK (gis_auth_dialog_account_added_cb), self);
+  g_signal_connect (self->goa_client, "account-removed", G_CALLBACK (gis_auth_dialog_account_removed_cb), self);
+
+  return TRUE;
+}
+
+static void
+gis_auth_dialog_initable_iface_init (GInitableIface *iface)
+{
+  iface->init = gis_auth_dialog_initable_init;
+}
+
+/* Public API */
+
+GtkWidget *
+gis_auth_dialog_new (GError **error)
+{
+  GisAuthDialog *dialog;
+
+  dialog = g_initable_new (GIS_TYPE_AUTH_DIALOG,
+                           NULL, error,
+                           "title", "",
+                           NULL);
+
+  return GTK_WIDGET (dialog);
+}
+
+gchar *
+gis_auth_dialog_get_account_id (GisAuthDialog *self)
+{
+  GoaAccount *goa_account;
+  gchar *account_id = NULL;
+
+  g_return_val_if_fail (GIS_IS_AUTH_DIALOG (self), NULL);
+
+  goa_account = gis_auth_dialog_get_selected_account (self);
+  if (goa_account)
+    account_id = goa_account_dup_id (goa_account);
+
+  g_clear_object (&goa_account);
+  return account_id;
+}
diff --git a/gnome-initial-setup/pages/livepatch/gis-auth-dialog.h b/gnome-initial-setup/pages/livepatch/gis-auth-dialog.h
new file mode 100644
index 0000000..09bfb69
--- /dev/null
+++ b/gnome-initial-setup/pages/livepatch/gis-auth-dialog.h
@@ -0,0 +1,40 @@
+/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
+/*
+ * Copyright (C) 2018 Canonical Ltd.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see <http://www.gnu.org/licenses/>.
+ *
+ * Written by:
+ *     Andrea Azzarone <andrea.azzarone@canonical.com>
+ */
+
+#ifndef __GIS_AUTH_DIALOG_H__
+#define __GIS_AUTH_DIALOG_H__
+
+#define GOA_API_IS_SUBJECT_TO_CHANGE
+#include <goa/goa.h>
+#include <gtk/gtk.h>
+
+G_BEGIN_DECLS
+
+#define GIS_TYPE_AUTH_DIALOG (gis_auth_dialog_get_type ())
+
+G_DECLARE_FINAL_TYPE (GisAuthDialog, gis_auth_dialog, GIS, AUTH_DIALOG, GtkDialog)
+
+GtkWidget *gis_auth_dialog_new ();
+gchar     *gis_auth_dialog_get_account_id (GisAuthDialog *dialog);
+
+G_END_DECLS
+
+#endif /* __GIS_AUTH_DIALOG_H__ */
diff --git a/gnome-initial-setup/pages/livepatch/gis-auth-dialog.ui b/gnome-initial-setup/pages/livepatch/gis-auth-dialog.ui
new file mode 100644
index 0000000..2f3c742
--- /dev/null
+++ b/gnome-initial-setup/pages/livepatch/gis-auth-dialog.ui
@@ -0,0 +1,231 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.22.1 -->
+<interface>
+  <requires lib="gtk+" version="3.10"/>
+  <object class="GtkListStore" id="liststore_account">
+    <columns>
+      <!-- column-name Id -->
+      <column type="gchararray"/>
+      <!-- column-name Email -->
+      <column type="gchararray"/>
+      <!-- column-name Account -->
+      <column type="GObject"/>
+    </columns>
+  </object>
+  <template class="GisAuthDialog" parent="GtkDialog">
+    <property name="can_focus">False</property>
+    <property name="resizable">False</property>
+    <property name="type_hint">dialog</property>
+    <child>
+      <placeholder/>
+    </child>
+    <child internal-child="vbox">
+      <object class="GtkBox">
+        <property name="can_focus">False</property>
+        <property name="orientation">vertical</property>
+        <property name="spacing">2</property>
+        <child internal-child="action_area">
+          <object class="GtkButtonBox">
+            <property name="can_focus">False</property>
+            <child>
+              <object class="GtkButton" id="button_add_another">
+                <property name="label" translatable="yes">Add another…</property>
+                <property name="visible">True</property>
+                <property name="can_focus">True</property>
+                <property name="receives_default">True</property>
+                <signal name="clicked" handler="gis_auth_dialog_button_add_another_cb" swapped="no"/>
+              </object>
+              <packing>
+                <property name="expand">True</property>
+                <property name="fill">True</property>
+                <property name="position">0</property>
+                <property name="secondary">True</property>
+                <property name="non_homogeneous">True</property>
+              </packing>
+            </child>
+            <child>
+              <object class="GtkButton" id="button_cancel">
+                <property name="label" translatable="yes">Cancel</property>
+                <property name="visible">True</property>
+                <property name="can_focus">True</property>
+                <property name="receives_default">True</property>
+                <signal name="clicked" handler="gis_auth_dialog_button_cancel_cb" swapped="no"/>
+              </object>
+              <packing>
+                <property name="expand">True</property>
+                <property name="fill">True</property>
+                <property name="position">2</property>
+                <property name="non_homogeneous">True</property>
+              </packing>
+            </child>
+            <child>
+              <object class="GtkButton" id="button_continue">
+                <property name="visible">True</property>
+                <property name="can_focus">True</property>
+                <property name="receives_default">True</property>
+                <signal name="clicked" handler="gis_auth_dialog_button_continue_cb" swapped="no"/>
+              </object>
+              <packing>
+                <property name="expand">True</property>
+                <property name="fill">True</property>
+                <property name="position">3</property>
+                <property name="non_homogeneous">True</property>
+              </packing>
+            </child>
+          </object>
+          <packing>
+            <property name="expand">True</property>
+            <property name="fill">True</property>
+            <property name="position">0</property>
+          </packing>
+        </child>
+        <child>
+          <object class="GtkInfoBar" id="error_bar">
+            <property name="can_focus">False</property>
+            <property name="no_show_all">True</property>
+            <property name="message_type">error</property>
+            <property name="revealed">False</property>
+            <child internal-child="action_area">
+              <object class="GtkButtonBox">
+                <property name="visible">True</property>
+                <property name="can_focus">False</property>
+                <property name="spacing">6</property>
+                <property name="layout_style">end</property>
+                <child>
+                  <placeholder/>
+                </child>
+              </object>
+              <packing>
+                <property name="expand">True</property>
+                <property name="fill">True</property>
+                <property name="position">0</property>
+              </packing>
+            </child>
+            <child internal-child="content_area">
+              <object class="GtkBox">
+                <property name="visible">True</property>
+                <property name="can_focus">False</property>
+                <property name="spacing">16</property>
+                <child>
+                  <object class="GtkLabel" id="label_error">
+                    <property name="visible">True</property>
+                    <property name="can_focus">False</property>
+                    <property name="justify">fill</property>
+                    <property name="wrap">True</property>
+                    <property name="width_chars">0</property>
+                    <property name="max_width_chars">50</property>
+                  </object>
+                  <packing>
+                    <property name="expand">False</property>
+                    <property name="fill">True</property>
+                    <property name="position">0</property>
+                  </packing>
+                </child>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">False</property>
+                <property name="position">0</property>
+              </packing>
+            </child>
+          </object>
+          <packing>
+            <property name="expand">False</property>
+            <property name="fill">True</property>
+            <property name="position">0</property>
+          </packing>
+        </child>
+        <child>
+          <object class="GtkBox">
+            <property name="visible">True</property>
+            <property name="can_focus">False</property>
+            <property name="halign">start</property>
+            <property name="border_width">12</property>
+            <property name="spacing">18</property>
+            <child>
+              <object class="GtkImage">
+                <property name="visible">True</property>
+                <property name="can_focus">False</property>
+                <property name="halign">start</property>
+                <property name="valign">start</property>
+                <property name="icon_name">ubuntu-logo-icon</property>
+                <property name="icon_size">6</property>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">False</property>
+                <property name="position">0</property>
+              </packing>
+            </child>
+            <child>
+              <object class="GtkBox" id="box_auth">
+                <property name="visible">True</property>
+                <property name="can_focus">False</property>
+                <property name="halign">start</property>
+                <property name="orientation">vertical</property>
+                <property name="spacing">12</property>
+                <child>
+                  <object class="GtkLabel" id="label_header">
+                    <property name="name">label_header</property>
+                    <property name="visible">True</property>
+                    <property name="can_focus">False</property>
+                    <property name="halign">start</property>
+                    <property name="valign">start</property>
+                    <property name="use_markup">True</property>
+                    <property name="justify">fill</property>
+                    <property name="wrap">True</property>
+                    <property name="max_width_chars">40</property>
+                  </object>
+                  <packing>
+                    <property name="expand">False</property>
+                    <property name="fill">False</property>
+                    <property name="position">0</property>
+                  </packing>
+                </child>
+                <child>
+                  <object class="GtkComboBox" id="combobox_account">
+                    <property name="can_focus">False</property>
+                    <property name="halign">start</property>
+                    <property name="model">liststore_account</property>
+                    <child>
+                      <object class="GtkCellRendererText"/>
+                      <attributes>
+                        <attribute name="text">1</attribute>
+                      </attributes>
+                    </child>
+                  </object>
+                  <packing>
+                    <property name="expand">False</property>
+                    <property name="fill">True</property>
+                    <property name="position">1</property>
+                  </packing>
+                </child>
+                <child>
+                  <object class="GtkLabel" id="label_account">
+                    <property name="can_focus">False</property>
+                    <property name="halign">start</property>
+                  </object>
+                  <packing>
+                    <property name="expand">False</property>
+                    <property name="fill">True</property>
+                    <property name="position">2</property>
+                  </packing>
+                </child>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">False</property>
+                <property name="position">1</property>
+              </packing>
+            </child>
+          </object>
+          <packing>
+            <property name="expand">False</property>
+            <property name="fill">False</property>
+            <property name="position">1</property>
+          </packing>
+        </child>
+      </object>
+    </child>
+  </template>
+</interface>
diff --git a/gnome-initial-setup/pages/livepatch/gis-livepatch-page.c b/gnome-initial-setup/pages/livepatch/gis-livepatch-page.c
new file mode 100644
index 0000000..eab2fb6
--- /dev/null
+++ b/gnome-initial-setup/pages/livepatch/gis-livepatch-page.c
@@ -0,0 +1,538 @@
+/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
+/*
+ * Copyright (C) 2018 Canonical Ltd.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see <http://www.gnu.org/licenses/>.
+ *
+ * Written by:
+ *     Andrea Azzarone <andrea.azzarone@canonical.com>
+ */
+
+/* Canonical Livepatch page {{{1 */
+
+#define PAGE_ID "livepatch"
+
+#include "config.h"
+#include "gis-auth-dialog.h"
+#include "gis-livepatch-page.h"
+#include "livepatch-resources.h"
+
+#define GOA_API_IS_SUBJECT_TO_CHANGE
+#include <goa/goa.h>
+#define GOA_BACKEND_API_IS_SUBJECT_TO_CHANGE
+#include <goabackend/goabackend.h>
+
+#include <glib/gi18n.h>
+#include <gio/gio.h>
+#include <polkit/polkit.h>
+
+struct _GisLivepatchPagePrivate {
+  GtkWidget *setup_button;
+  GtkWidget *message_box;
+  GtkWidget *signout_button;
+  GtkWidget *message_label;
+
+  GoaClient *goa_client;
+  GoaAccount *goa_account;
+  GPermission *permission;
+
+  gchar *token;
+  gboolean waiting_for_livepatch_response;
+  gboolean user_current_choice;
+};
+typedef struct _GisLivepatchPagePrivate GisLivepatchPagePrivate;
+
+G_DEFINE_TYPE_WITH_PRIVATE (GisLivepatchPage, gis_livepatch_page, GIS_TYPE_PAGE);
+
+#define LIVEPATCH_ENABLING_MESSAGE  _("You're all set: Livepatch is now being enabled.")
+#define LIVEPATCH_ENABLE_SUCCESS_MESSAGE  _("You're all set: Livepatch is now on.")
+#define LIVEPATCH_ENABLE_FAILURE_MESSAGE  _("Failed to setup Livepatch: please retry.")
+#define LIVEPATCH_DISABLE_FAILURE_MESSAGE _("Failed to disable Livepatch: please retry.")
+
+static gboolean
+set_livepatch_enabled (GisLivepatchPage *page,
+                       gboolean          value);
+
+static gboolean
+is_livepatch_enabled ()
+{
+  return g_file_test ("/var/snap/canonical-livepatch/common/machine-token",
+                      G_FILE_TEST_EXISTS);
+}
+
+static char *
+get_item (const char *buffer, const char *name)
+{
+  g_autofree gchar *label = NULL;
+  gchar *start = NULL, *end = NULL;
+  gchar end_char;
+
+  label = g_strconcat (name, "=", NULL);
+  if ((start = strstr (buffer, label)) != NULL) {
+    start += strlen (label);
+    end_char = '\n';
+    if (*start == '"') {
+      start++;
+      end_char = '"';
+    }
+    end = strchr (start, end_char);
+  }
+
+  if (start != NULL && end != NULL)
+    return g_strndup (start, end - start);
+  else
+    return NULL;
+}
+
+static gboolean
+is_lts ()
+{
+  g_autofree gchar *buffer = NULL;
+  g_autofree gchar *version = NULL;
+
+  if (g_file_get_contents ("/etc/os-release", &buffer, NULL, NULL))
+    version = get_item (buffer, "VERSION");
+
+  return version && g_strrstr (version, "LTS") != NULL;
+}
+
+static gboolean
+is_livepatch_supported ()
+{
+  return is_lts ();
+}
+
+static void
+open_software_properties ()
+{
+  g_autofree gchar *command = NULL;
+  g_autoptr(GAppInfo) info = NULL;
+  g_autoptr(GError) error = NULL;
+
+  info = g_app_info_create_from_commandline ("software-properties-gtk --open-tab=2", NULL, G_APP_INFO_CREATE_NONE, &error);
+  if (info == NULL) {
+     g_warning ("Failed to get launch information from software-properties-gtk: %s", error->message);
+     return;
+  }
+
+  if (!g_app_info_launch (info, NULL, NULL, &error)) {
+     g_warning ("Failed to launch software-properties-gtk: %s", error->message);
+     return;
+  }
+}
+
+static void
+on_livepatch_enabled (GObject *source_object,
+                      GAsyncResult *res,
+                      gpointer data)
+{
+  GisLivepatchPage *page = GIS_LIVEPATCH_PAGE (data);
+  GisLivepatchPagePrivate *priv = gis_livepatch_page_get_instance_private (page);
+  g_autoptr(GVariant) result = NULL;
+  gboolean success = TRUE;
+  gboolean current_state = is_livepatch_enabled ();
+  g_autofree gchar *out_message = NULL;
+  g_autoptr(GError) error = NULL;
+
+  priv->waiting_for_livepatch_response = FALSE;
+
+  result = g_dbus_proxy_call_finish (G_DBUS_PROXY (source_object), res, &error);
+  if (result == NULL) {
+    g_warning ("Failed to enable/disable Livepatch through DBus: %s\n", error->message);
+    out_message = g_strdup (error->message);
+    success = FALSE;
+  } else {
+    gboolean out_error;
+
+    g_variant_get (result, "(bs)", &out_error, &out_message);
+    if (out_error) {
+      g_warning ("Failed to enable/disable Livepatch: %s\n", out_message);
+      success = FALSE;
+    }
+  }
+
+  if (success) {
+     /* We succeded to enable or disable livepatch.
+        Check if this corresponds to the current user choice. */
+    if (current_state != priv->user_current_choice) {
+      set_livepatch_enabled (page, priv->user_current_choice);
+    } else if (current_state) {
+      gtk_label_set_text (GTK_LABEL (priv->message_label), LIVEPATCH_ENABLE_SUCCESS_MESSAGE);
+    }
+  } else if (current_state != priv->user_current_choice) {
+    GisAssistant *assistant = gis_driver_get_assistant (GIS_PAGE (page)->driver);
+
+    /* We failed to enable or disable livepatch. Show an error message if
+       the current state does not correpond the current user choice.
+       Ignore the message if the call failed but the current status correponds
+       to the user choice. */
+    if (priv->user_current_choice) {
+      gtk_label_set_text (GTK_LABEL (priv->message_label), LIVEPATCH_ENABLE_FAILURE_MESSAGE);
+      gtk_widget_set_sensitive (priv->setup_button, TRUE);
+    } else {
+      gtk_label_set_text (GTK_LABEL (priv->message_label), LIVEPATCH_DISABLE_FAILURE_MESSAGE);
+    }
+
+    if (gis_assistant_get_current_page (assistant) != GIS_PAGE (page)) {
+      GtkWidget *dialog;
+
+      dialog =  gtk_message_dialog_new_with_markup (GTK_WINDOW (gtk_widget_get_toplevel (GTK_WIDGET (page))),
+                                                    GTK_DIALOG_MODAL | GTK_DIALOG_DESTROY_WITH_PARENT,
+                                                    GTK_MESSAGE_ERROR,
+                                                    GTK_BUTTONS_NONE,
+                                                    "<span font_size='x-large' font_weight='bold'>%s</span>",
+                                                    _("Sorry there's been a problem with setting up Canonical Livepatch"));
+      gtk_message_dialog_format_secondary_text (GTK_MESSAGE_DIALOG (dialog),
+                                                _("The error was: %s"),
+                                                out_message);
+      gtk_dialog_add_buttons (GTK_DIALOG (dialog),
+                             _("Settings…"),
+                             GTK_RESPONSE_OK,
+                             _("Ignore"),
+                             GTK_RESPONSE_CANCEL,
+                             NULL);
+
+      if (gtk_dialog_run (GTK_DIALOG (dialog)) == GTK_RESPONSE_OK)
+        open_software_properties ();
+
+      gtk_widget_destroy (dialog);
+    }
+  }
+
+  gis_driver_uninhibit_quit (GIS_PAGE (page)->driver);
+}
+
+static gboolean
+set_livepatch_enabled (GisLivepatchPage *page,
+                       gboolean          value)
+{
+  GisLivepatchPagePrivate *priv = gis_livepatch_page_get_instance_private (page);
+  g_autoptr(GDBusProxy) proxy = NULL;
+  g_autoptr(GError) error = NULL;
+  GVariant *args;
+
+  proxy = g_dbus_proxy_new_for_bus_sync (G_BUS_TYPE_SYSTEM,
+                                         G_DBUS_PROXY_FLAGS_NONE,
+                                         NULL, /* info */
+                                         "com.ubuntu.SoftwareProperties",
+                                         "/",
+                                         "com.ubuntu.SoftwareProperties",
+                                         NULL, /* cancellable */
+                                         &error);
+
+  if (proxy == NULL) {
+    g_warning ("Failed to get dbus proxy for com.ubuntu.SoftwareProperties: %s", error->message);
+    return FALSE;
+  }
+
+  if (value) {
+    args = g_variant_new ("(bs)", TRUE, priv->token);
+  } else {
+    args = g_variant_new ("(bs)", FALSE, "");
+  }
+
+  gis_driver_inhibit_quit (GIS_PAGE (page)->driver);
+  priv->waiting_for_livepatch_response = TRUE;
+  g_dbus_proxy_call (proxy,
+                     "SetLivepatchEnabled",
+                     args,
+                     /* Fallback to interactive authorization if the meta action didn't work */
+                     G_DBUS_CALL_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION,
+                     1200000, /* 20 minutes timeout should be enough to install and enable livepatch */
+                     NULL, /* cancellable */
+                     on_livepatch_enabled,
+                     page);
+
+  return TRUE;
+}
+
+static void
+on_livepatch_token_ready (GObject      *source_object,
+                          GAsyncResult *res,
+                          gpointer      data)
+{
+  GisLivepatchPage *page = GIS_LIVEPATCH_PAGE (data);
+  GisLivepatchPagePrivate *priv = gis_livepatch_page_get_instance_private (page);
+  GoaPasswordBased *password_based = GOA_PASSWORD_BASED (source_object);
+  g_autoptr(GError) error = NULL;
+
+  if (!goa_password_based_call_get_password_finish (password_based, &priv->token, res, &error)) {
+    g_warning ("Failed to get livepatch token: %s", error->message);
+    gtk_widget_set_sensitive (priv->setup_button, TRUE);
+    return;
+  }
+
+  priv->user_current_choice = TRUE;
+  gtk_widget_set_visible (priv->message_box, TRUE);
+  if (set_livepatch_enabled (page, TRUE)) {
+    gtk_label_set_text (GTK_LABEL (priv->message_label), LIVEPATCH_ENABLING_MESSAGE);
+  } else {
+    gtk_label_set_text (GTK_LABEL (priv->message_label), LIVEPATCH_ENABLE_FAILURE_MESSAGE);
+    gtk_widget_set_sensitive (priv->setup_button, TRUE);
+  }
+}
+
+static void
+goa_account_store (const gchar *account_id)
+{
+  GSettingsSchemaSource *source;
+  g_autoptr(GSettingsSchema) schema = NULL;
+  g_autoptr(GSettings) settings = NULL;
+
+  /* Check if the gsettings schema is installed */
+  source = g_settings_schema_source_get_default ();
+  if (!source)
+    return;
+  schema = g_settings_schema_source_lookup (source, "com.ubuntu.SoftwareProperties", TRUE);
+  if (!schema)
+    return;
+
+  /* If the schema is installed... */
+  settings = g_settings_new ("com.ubuntu.SoftwareProperties");
+  g_settings_set_string (settings, "goa-account-id", account_id);
+}
+
+static void
+login_and_enable_livepatch (GisLivepatchPage *page)
+{
+  GisLivepatchPagePrivate *priv = gis_livepatch_page_get_instance_private (page);
+  g_autofree gchar *account_id = NULL;
+  GoaObject *goa_object = NULL;
+  GoaPasswordBased *password_based = NULL;
+  GtkWidget *dialog = NULL;
+  g_autoptr(GError) error = NULL;
+
+  /* show the login dialog if needed */
+  dialog = gis_auth_dialog_new (&error);
+  if (dialog) {
+    gtk_window_set_transient_for (GTK_WINDOW (dialog),
+                                  GTK_WINDOW (gtk_widget_get_toplevel (GTK_WIDGET (page))));
+
+    if (gtk_dialog_run (GTK_DIALOG (dialog)) == GTK_RESPONSE_OK) {
+        account_id = gis_auth_dialog_get_account_id (GIS_AUTH_DIALOG (dialog));
+        goa_object = goa_client_lookup_by_id (priv->goa_client, account_id);
+    }
+  } else {
+    g_warning ("Failed to create the authentication dialog: %s\n", error->message);
+  }
+
+  /* login dialog was dismissed */
+  if (goa_object == NULL) {
+    gtk_widget_set_sensitive (priv->setup_button, TRUE);
+    goto out;
+  }
+
+  priv->goa_account = goa_object_get_account (goa_object);
+  goa_account_store (account_id);
+
+  /* retrieve livepatch token */
+  password_based = goa_object_peek_password_based (goa_object);
+
+  goa_password_based_call_get_password (password_based,
+                                        "livepatch",
+                                        NULL /* cancellable */,
+                                        on_livepatch_token_ready,
+                                        page);
+ out:
+  g_clear_pointer (&dialog, gtk_widget_destroy);
+  g_clear_object (&goa_object);
+}
+
+static void
+on_livepatch_permission_acquired (GObject      *source,
+                                  GAsyncResult *res,
+                                  gpointer      data)
+{
+  GisLivepatchPage *page = GIS_LIVEPATCH_PAGE (data);
+  GisLivepatchPagePrivate *priv = gis_livepatch_page_get_instance_private (page);
+  g_autoptr(GError) error = NULL;
+  gboolean allowed;
+
+  allowed = g_permission_acquire_finish (priv->permission, res, &error);
+  if (error) {
+      if (!g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
+        g_warning ("Failed to acquire permission: %s", error->message);
+      else
+        gtk_widget_set_sensitive (priv->setup_button, TRUE);
+      return;
+  }
+
+  if (allowed)
+    login_and_enable_livepatch (page);
+}
+
+static void
+on_setup_button_clicked (GtkButton *button,
+                         gpointer  data)
+{
+  GisLivepatchPage *page = GIS_LIVEPATCH_PAGE (data);
+  GisLivepatchPagePrivate *priv = gis_livepatch_page_get_instance_private (page);
+
+  gtk_widget_set_sensitive (priv->setup_button, FALSE);
+
+  if (G_IS_PERMISSION (priv->permission) && g_permission_get_allowed (priv->permission)) {
+    login_and_enable_livepatch (page);
+  }
+  else if (G_IS_PERMISSION (priv->permission)  && g_permission_get_can_acquire (priv->permission)) {
+    g_permission_acquire_async (priv->permission,
+                                NULL,
+                                on_livepatch_permission_acquired,
+                                page);
+  } else {
+     g_warning ("Could not start the attempt to acquire the permission to enable Livepatch. Fallback to per-app policy.");
+     login_and_enable_livepatch (page);
+  }
+}
+
+static void
+on_signout_button_clicked (GtkButton        *button,
+                           GisLivepatchPage *page)
+{
+  GisLivepatchPagePrivate *priv = gis_livepatch_page_get_instance_private (page);
+
+  /* disable livepatch */
+  priv->user_current_choice = FALSE;
+  if (!priv->waiting_for_livepatch_response && is_livepatch_enabled ())
+    set_livepatch_enabled (page, FALSE);
+
+  goa_account_store ("");
+  /* remove GoaAccount from system */
+  goa_account_call_remove (priv->goa_account, NULL, NULL, NULL);
+
+  /* reset the GUI */
+  gtk_widget_set_sensitive (priv->setup_button, TRUE);
+  gtk_widget_set_visible (priv->message_box, FALSE);
+
+  g_clear_object (&priv->goa_account);
+  g_clear_pointer (&priv->token, g_free);
+}
+
+static void
+show_legal (GtkButton *button, GisLivepatchPage *page)
+{
+  g_autofree gchar *buffer = NULL;
+  g_autofree gchar *privacy_policy = NULL;
+  g_autoptr(GError) error = NULL;
+
+  if (g_file_get_contents ("/etc/os-release", &buffer, NULL, NULL))
+    privacy_policy = get_item (buffer, "PRIVACY_POLICY_URL");
+
+  if (!gtk_show_uri_on_window (GTK_WINDOW (gtk_widget_get_toplevel (GTK_WIDGET (page))),
+                               privacy_policy,
+                               GDK_CURRENT_TIME, &error)) {
+    GtkWidget *dialog;
+    dialog = gtk_message_dialog_new (GTK_WINDOW (gtk_widget_get_toplevel (GTK_WIDGET (page))),
+                                     GTK_DIALOG_MODAL | GTK_DIALOG_DESTROY_WITH_PARENT,
+                                     GTK_MESSAGE_ERROR,
+                                     GTK_BUTTONS_CLOSE,
+                                     _("Failed to show Livepatch policy: %s"), error->message);
+    gtk_dialog_run (GTK_DIALOG (dialog));
+    gtk_widget_destroy (dialog);
+    return;
+  }
+}
+
+static void
+gis_livepatch_page_constructed (GObject *object)
+{
+  GisLivepatchPage *page = GIS_LIVEPATCH_PAGE (object);
+  GisLivepatchPagePrivate *priv = gis_livepatch_page_get_instance_private (page);
+  g_autoptr(GError) error = NULL;
+
+  G_OBJECT_CLASS (gis_livepatch_page_parent_class)->constructed (object);
+
+  gis_page_set_skippable (GIS_PAGE (page), TRUE);
+
+  priv->goa_client = goa_client_new_sync (NULL, &error);
+
+  if (priv->goa_client == NULL) {
+    g_error ("Failed to get a GoaClient: %s", error->message);
+    return;
+  }
+
+  priv->permission = polkit_permission_new_sync ("com.ubuntu.welcome.livepatch", NULL, NULL, &error);
+  if (priv->permission == NULL) {
+    g_warning ("Could not get 'com.ubuntu.welcome.livepatch' permission: %s",
+                error->message);
+  }
+
+  g_signal_connect (priv->setup_button, "clicked",
+                    G_CALLBACK (on_setup_button_clicked), page);
+
+  g_signal_connect (priv->signout_button, "clicked",
+                    G_CALLBACK (on_signout_button_clicked), page);
+
+  gis_page_set_complete (GIS_PAGE (page), TRUE);
+  gtk_widget_show (GTK_WIDGET (page));
+}
+
+static void
+gis_livepatch_page_dispose (GObject *object)
+{
+  GisLivepatchPage *page = GIS_LIVEPATCH_PAGE (object);
+  GisLivepatchPagePrivate *priv = gis_livepatch_page_get_instance_private (page);
+
+  g_clear_object (&priv->goa_client);
+  g_clear_object (&priv->goa_account);
+  g_clear_object (&priv->permission);
+  g_clear_pointer (&priv->token, g_free);
+
+  G_OBJECT_CLASS (gis_livepatch_page_parent_class)->dispose (object);
+}
+
+static void
+gis_livepatch_page_locale_changed (GisPage *page)
+{
+  gis_page_set_title (GIS_PAGE (page), _("Livepatch"));
+}
+
+static void
+gis_livepatch_page_class_init (GisLivepatchPageClass *klass)
+{
+  GisPageClass *page_class = GIS_PAGE_CLASS (klass);
+  GObjectClass *object_class = G_OBJECT_CLASS (klass);
+
+  gtk_widget_class_set_template_from_resource (GTK_WIDGET_CLASS (klass), "/org/gnome/initial-setup/gis-livepatch-page.ui");
+
+  gtk_widget_class_bind_template_child_private (GTK_WIDGET_CLASS (klass), GisLivepatchPage, setup_button);
+  gtk_widget_class_bind_template_child_private (GTK_WIDGET_CLASS (klass), GisLivepatchPage, message_box);
+  gtk_widget_class_bind_template_child_private (GTK_WIDGET_CLASS (klass), GisLivepatchPage, signout_button);
+  gtk_widget_class_bind_template_child_private (GTK_WIDGET_CLASS (klass), GisLivepatchPage, message_label);
+  gtk_widget_class_bind_template_callback (GTK_WIDGET_CLASS (klass), show_legal);
+
+
+  page_class->page_id = PAGE_ID;
+  page_class->locale_changed = gis_livepatch_page_locale_changed;
+  object_class->constructed = gis_livepatch_page_constructed;
+  object_class->dispose = gis_livepatch_page_dispose;
+}
+
+static void
+gis_livepatch_page_init (GisLivepatchPage *page)
+{
+  g_resources_register (livepatch_get_resource ());
+
+  gtk_widget_init_template (GTK_WIDGET (page));
+}
+
+GisPage *
+gis_prepare_livepatch_page (GisDriver *driver)
+{
+  if (is_livepatch_enabled () || !is_livepatch_supported ())
+    return NULL;
+
+  return g_object_new (GIS_TYPE_LIVEPATCH_PAGE,
+                       "driver", driver,
+                       NULL);
+}
diff --git a/gnome-initial-setup/pages/livepatch/gis-livepatch-page.h b/gnome-initial-setup/pages/livepatch/gis-livepatch-page.h
new file mode 100644
index 0000000..3356dbe
--- /dev/null
+++ b/gnome-initial-setup/pages/livepatch/gis-livepatch-page.h
@@ -0,0 +1,52 @@
+/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
+/*
+ * Copyright (C) 2018 Canonical Ltd.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef __GIS_LIVEPATCH_PAGE_H__
+#define __GIS_LIVEPATCH_PAGE_H__
+
+#include "gnome-initial-setup.h"
+
+G_BEGIN_DECLS
+
+#define GIS_TYPE_LIVEPATCH_PAGE            (gis_livepatch_page_get_type ())
+#define GIS_LIVEPATCH_PAGE(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GIS_TYPE_LIVEPATCH_PAGE, GisLivepatchPage))
+#define GIS_LIVEPATCH_PAGE_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass),  GIS_TYPE_LIVEPATCH_PAGE, GisLivepatchPageClass))
+#define GIS_IS_LIVEPATCH_PAGE(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GIS_TYPE_LIVEPATCH_PAGE))
+#define GIS_IS_LIVEPATCH_PAGE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass),  GIS_TYPE_LIVEPATCH_PAGE))
+#define GIS_LIVEPATCH_PAGE_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj),  GIS_TYPE_LIVEPATCH_PAGE, GisLivepatchPageClass))
+
+typedef struct _GisLivepatchPage        GisLivepatchPage;
+typedef struct _GisLivepatchPageClass   GisLivepatchPageClass;
+
+struct _GisLivepatchPage
+{
+  GisPage parent;
+};
+
+struct _GisLivepatchPageClass
+{
+  GisPageClass parent_class;
+};
+
+GType gis_livepatch_page_get_type (void);
+
+GisPage *gis_prepare_livepatch_page (GisDriver *driver);
+
+G_END_DECLS
+
+#endif /* __GIS_LIVEPATCH_PAGE_H__ */
diff --git a/gnome-initial-setup/pages/livepatch/gis-livepatch-page.ui b/gnome-initial-setup/pages/livepatch/gis-livepatch-page.ui
new file mode 100644
index 0000000..c877ff5
--- /dev/null
+++ b/gnome-initial-setup/pages/livepatch/gis-livepatch-page.ui
@@ -0,0 +1,156 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<interface>
+  <!-- interface-requires gtk+ 3.0 -->
+  <template class="GisLivepatchPage" parent="GisPage">
+    <child>
+      <object class="GtkGrid">
+        <property name="visible">True</property>
+        <property name="can_focus">False</property>
+        <property name="row_spacing">40</property>
+	<property name="border_width">20</property>
+        <child>
+          <object class="GtkLabel" id="title">
+            <property name="visible">True</property>
+            <property name="can_focus">False</property>
+            <property name="halign">start</property>
+            <property name="valign">start</property>
+            <property name="label" translatable="yes">Livepatch</property>
+            <attributes>
+              <attribute name="weight" value="bold"/>
+              <attribute name="scale" value="1.8"/>
+            </attributes>
+          </object>
+          <packing>
+            <property name="left_attach">0</property>
+            <property name="top_attach">0</property>
+            <property name="width">3</property>
+            <property name="height">1</property>
+          </packing>
+        </child>
+        <child>
+          <object class="GtkImage" id="icon_image">
+            <property name="visible">True</property>
+            <property name="can_focus">False</property>
+            <property name="valign">start</property>
+            <property name="halign">start</property>
+            <property name="resource">/org/gnome/initial-setup/livepatch.svg</property>
+          </object>
+          <packing>
+            <property name="left_attach">0</property>
+            <property name="top_attach">1</property>
+            <property name="width">1</property>
+            <property name="height">1</property>
+          </packing>
+        </child>
+        <child>
+          <object class="GtkLabel" id="right_padding_label">
+            <property name="visible">True</property>
+          </object>
+          <packing>
+            <property name="left_attach">2</property>
+            <property name="top_attach">1</property>
+            <property name="width">1</property>
+            <property name="height">1</property>
+          </packing>
+        </child>
+        <child>
+          <object class="GtkBox">
+            <property name="visible">True</property>
+            <property name="can_focus">False</property>
+	    <property name="halign">center</property>
+	    <property name="hexpand">True</property>
+	    <property name="valign">start</property>
+	    <property name="vexpand">True</property>
+	    <property name="orientation">vertical</property>
+            <child>
+              <object class="GtkLabel">
+                <property name="visible">True</property>
+                <property name="can_focus">False</property>
+                <property name="max-width-chars">50</property>
+                <property name="xalign">0</property>
+                <property name="halign">start</property>
+                <property name="label" translatable="yes">Canonical Livepatch helps keep your computer secure, by applying some updates that would normally require restarting.</property>
+                <property name="wrap">True</property>
+              </object>
+            </child>
+            <child>
+              <object class="GtkLabel">
+                <property name="visible">True</property>
+                <property name="xalign">0</property>
+                <property name="margin_top">18</property>
+                <property name="label" translatable="yes">Would you like to set up Livepatch now?</property>
+                <attributes>
+                  <attribute name="weight" value="bold"/>
+                </attributes>
+              </object>
+            </child>
+            <child>
+              <object class="GtkBox">
+                <property name="visible">True</property>
+                <property name="can_focus">False</property>
+                <property name="halign">start</property>
+                <property name="orientation">horizontal</property>
+                <property name="margin_top">18</property>
+                <property name="spacing">6</property>
+                <child>
+                  <object class="GtkButton" id="setup_button">
+                    <property name="visible">True</property>
+                    <property name="halign">start</property>
+                    <property name="label" translatable="yes">Set Up Livepatch…</property>
+                    <style>
+                      <class name="suggested-action"/>
+                    </style>
+                  </object>
+                </child>
+                <child>
+                  <object class="GtkButton">
+                    <property name="visible">True</property>
+                    <property name="label" translatable="yes">Legal notice</property>
+                    <signal name="clicked" handler="show_legal"/>
+                  </object>
+                </child>
+              </object>
+            </child>
+            <child>
+              <object class="GtkBox" id="message_box">
+                <property name="visible">False</property>
+                <property name="can_focus">False</property>
+                <property name="halign">fill</property>
+                <property name="orientation">horizontal</property>
+                <property name="margin_top">18</property>
+                <child>
+                  <object class="GtkLabel" id="message_label">
+                    <property name="visible">True</property>
+                    <property name="xalign">0</property>
+                  </object>
+                </child>
+                <child>
+                  <object class="GtkButton" id="signout_button">
+                    <property name="visible">True</property>
+                    <property name="label" translatable="yes">Sign Out</property>
+                  </object>
+                  <packing>
+                    <property name="pack-type">end</property>
+                  </packing>
+                </child>
+	      </object>
+	    </child>
+          </object>
+          <packing>
+            <property name="left_attach">1</property>
+            <property name="top_attach">1</property>
+            <property name="width">1</property>
+            <property name="height">1</property>
+          </packing>
+        </child>
+      </object>
+    </child>
+  </template>
+  <object class="GtkSizeGroup">
+    <property name="mode">horizontal</property>
+    <widgets>
+      <widget name="icon_image"/>
+      <widget name="right_padding_label"/>
+    </widgets>
+  </object>
+</interface>
diff --git a/gnome-initial-setup/pages/livepatch/livepatch.gresource.xml b/gnome-initial-setup/pages/livepatch/livepatch.gresource.xml
new file mode 100644
index 0000000..5678958
--- /dev/null
+++ b/gnome-initial-setup/pages/livepatch/livepatch.gresource.xml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<gresources>
+  <gresource prefix="/org/gnome/initial-setup">
+    <file preprocess="xml-stripblanks" alias="gis-livepatch-page.ui">gis-livepatch-page.ui</file>
+    <file preprocess="xml-stripblanks" alias="gis-auth-dialog.ui">gis-auth-dialog.ui</file>
+    <file alias="livepatch.svg">livepatch.svg</file>
+  </gresource>
+</gresources>
+
diff --git a/gnome-initial-setup/pages/livepatch/livepatch.svg b/gnome-initial-setup/pages/livepatch/livepatch.svg
new file mode 100644
index 0000000..a84bcd6
--- /dev/null
+++ b/gnome-initial-setup/pages/livepatch/livepatch.svg
@@ -0,0 +1 @@
+<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="Layer_1" x="0px" y="0px" width="150px" height="150px" viewBox="0 0 400 400" style="enable-background:new 0 0 400 400;" xml:space="preserve"> <style type="text/css"> .st0{fill:#666666; fill-opacity:0.25;} </style> <g> <path class="st0" d="M73.7,168.4c0-69.7,56.7-126.3,126.3-126.3c69.7,0,126.3,56.7,126.3,126.3h42.1C368.4,75.6,292.9,0,200,0 C107.1,0,31.6,75.6,31.6,168.4v63.7h0C31.9,324.8,107.3,400,200,400c92.9,0,168.4-75.6,168.4-168.4v-21.1H73.7V168.4L73.7,168.4z M200,242.1c17.4,0,31.6,14.1,31.6,31.6c0,13.7-8.8,25.4-21,29.7v54.4c0,5.8-4.7,10.5-10.5,10.5s-10.5-4.7-10.5-10.5v-54.4 c-12.3-4.3-21.1-16-21.1-29.8C168.4,256.3,182.6,242.1,200,242.1L200,242.1z"/> </g> </svg>
diff --git a/gnome-initial-setup/pages/livepatch/meson.build b/gnome-initial-setup/pages/livepatch/meson.build
new file mode 100644
index 0000000..14d89ed
--- /dev/null
+++ b/gnome-initial-setup/pages/livepatch/meson.build
@@ -0,0 +1,12 @@
+sources += gnome.compile_resources(
+    'livepatch-resources',
+    files('livepatch.gresource.xml'),
+    c_name: 'livepatch'
+)
+
+sources += files(
+    'gis-livepatch-page.c',
+    'gis-livepatch-page.h',
+    'gis-auth-dialog.c',
+    'gis-auth-dialog.h',
+)
diff --git a/gnome-initial-setup/pages/meson.build b/gnome-initial-setup/pages/meson.build
index 3230501..32f615b 100644
--- a/gnome-initial-setup/pages/meson.build
+++ b/gnome-initial-setup/pages/meson.build
@@ -10,6 +10,9 @@ pages = [
    'software',
    'summary',
    'welcome',
+   'ubuntu-report',
+   'livepatch',
+   'apps',
 ]
 
 if libmalcontent_dep.found() and libmalcontent_ui_dep.found()
diff --git a/gnome-initial-setup/pages/privacy/gis-privacy-page.c b/gnome-initial-setup/pages/privacy/gis-privacy-page.c
index 80c40c3..0774ec4 100644
--- a/gnome-initial-setup/pages/privacy/gis-privacy-page.c
+++ b/gnome-initial-setup/pages/privacy/gis-privacy-page.c
@@ -243,7 +243,7 @@ activate_link (GtkLabel       *label,
 static void
 gis_privacy_page_locale_changed (GisPage *page)
 {
-  gis_page_set_title (GIS_PAGE (page), _("Privacy"));
+  gis_page_set_title (GIS_PAGE (page), _("Welcome to Ubuntu"));
 }
 
 static void
diff --git a/gnome-initial-setup/pages/summary/gis-summary-page.c b/gnome-initial-setup/pages/summary/gis-summary-page.c
index b1e0f78..c14eb94 100644
--- a/gnome-initial-setup/pages/summary/gis-summary-page.c
+++ b/gnome-initial-setup/pages/summary/gis-summary-page.c
@@ -190,7 +190,7 @@ done_cb (GtkButton *button, GisSummaryPage *page)
       log_user_in (page);
       break;
     case GIS_DRIVER_MODE_EXISTING_USER:
-      g_application_quit (G_APPLICATION (GIS_PAGE (page)->driver));
+      gis_driver_quit (GIS_PAGE (page)->driver);
     default:
       break;
     }
diff --git a/gnome-initial-setup/pages/ubuntu-report/gis-ubuntu-report-page.c b/gnome-initial-setup/pages/ubuntu-report/gis-ubuntu-report-page.c
new file mode 100644
index 0000000..2518e0e
--- /dev/null
+++ b/gnome-initial-setup/pages/ubuntu-report/gis-ubuntu-report-page.c
@@ -0,0 +1,207 @@
+/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
+/*
+ * Copyright (C) 2018 Canonical Ltd.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see <http://www.gnu.org/licenses/>.
+ */
+
+/* Ubuntu report page {{{1 */
+
+#define PAGE_ID "ubuntu-report"
+
+#include "config.h"
+#include "gis-ubuntu-report-page.h"
+#include "ubuntu-report-resources.h"
+
+#include <glib/gi18n.h>
+#include <gio/gio.h>
+#include <libsysmetrics.h>
+
+struct _GisUbuntuReportPagePrivate {
+  GtkWidget *description_label;
+  GtkWidget *opt_in_radio;
+  gchar *report;
+};
+typedef struct _GisUbuntuReportPagePrivate GisUbuntuReportPagePrivate;
+
+G_DEFINE_TYPE_WITH_PRIVATE (GisUbuntuReportPage, gis_ubuntu_report_page, GIS_TYPE_PAGE);
+
+static void
+gis_ubuntu_report_page_constructed (GObject *object)
+{
+  GisUbuntuReportPage *page = GIS_UBUNTU_REPORT_PAGE (object);
+
+  G_OBJECT_CLASS (gis_ubuntu_report_page_parent_class)->constructed (object);
+
+  gis_page_set_skippable (GIS_PAGE (page), TRUE);
+
+  gis_page_set_complete (GIS_PAGE (page), TRUE);
+  gtk_widget_show (GTK_WIDGET (page));
+}
+
+static void
+gis_ubuntu_report_page_finalize (GObject *object)
+{
+  GisUbuntuReportPage *page = GIS_UBUNTU_REPORT_PAGE (object);
+  GisUbuntuReportPagePrivate *priv = gis_ubuntu_report_page_get_instance_private (page);
+
+  g_free (priv->report);
+
+  G_OBJECT_CLASS (gis_ubuntu_report_page_parent_class)->finalize (object);
+}
+
+static void
+show_report (GtkButton *button, GisUbuntuReportPage *page)
+{
+  GisUbuntuReportPagePrivate *priv = gis_ubuntu_report_page_get_instance_private (page);
+  g_autofree char *error = NULL;
+  GtkWidget *dialog, *scroll, *text_view;
+
+  if (priv->report == NULL)
+    error = sysmetrics_collect (&priv->report);
+  if (error != NULL) {
+    dialog = gtk_message_dialog_new (GTK_WINDOW (gtk_widget_get_toplevel (GTK_WIDGET (page))),
+                                     GTK_DIALOG_MODAL | GTK_DIALOG_DESTROY_WITH_PARENT,
+                                     GTK_MESSAGE_ERROR,
+                                     GTK_BUTTONS_CLOSE,
+                                     _("Failed to get report information: %s"), error);
+    gtk_dialog_run (GTK_DIALOG (dialog));
+    gtk_widget_destroy (dialog);
+    return;
+  }
+
+  dialog = gtk_dialog_new_with_buttons (_("Report"),
+                                        GTK_WINDOW (gtk_widget_get_toplevel (GTK_WIDGET (page))),
+                                        GTK_DIALOG_MODAL |
+                                        GTK_DIALOG_DESTROY_WITH_PARENT |
+                                        GTK_DIALOG_USE_HEADER_BAR,
+                                       NULL, NULL);
+  gtk_widget_set_size_request (dialog, 800, 600);
+
+  scroll = gtk_scrolled_window_new (NULL, NULL);
+  gtk_widget_show (scroll);
+  gtk_box_pack_start (GTK_BOX (gtk_dialog_get_content_area (GTK_DIALOG (dialog))), scroll, TRUE, TRUE, 0);
+
+  text_view = gtk_text_view_new ();
+  gtk_widget_show (text_view);
+  gtk_text_buffer_set_text (gtk_text_view_get_buffer (GTK_TEXT_VIEW (text_view)), priv->report, -1);
+  gtk_container_add (GTK_CONTAINER (scroll), text_view);
+
+  gtk_dialog_run (GTK_DIALOG (dialog));
+  gtk_widget_destroy (dialog);
+}
+
+static void
+show_legal (GtkButton *button, GisUbuntuReportPage *page)
+{
+  g_autoptr(GError) error = NULL;
+
+  if (!gtk_show_uri_on_window (GTK_WINDOW (gtk_widget_get_toplevel (GTK_WIDGET (page))),
+                               "https://www.ubuntu.com/legal/terms-and-policies/systems-information-notice",
+                               GDK_CURRENT_TIME, &error)) {
+    GtkWidget *dialog;
+    dialog = gtk_message_dialog_new (GTK_WINDOW (gtk_widget_get_toplevel (GTK_WIDGET (page))),
+                                     GTK_DIALOG_MODAL | GTK_DIALOG_DESTROY_WITH_PARENT,
+                                     GTK_MESSAGE_ERROR,
+                                     GTK_BUTTONS_CLOSE,
+                                     _("Failed to show privacy policy: %s"), error->message);
+    gtk_dialog_run (GTK_DIALOG (dialog));
+    gtk_widget_destroy (dialog);
+    return;
+  }
+}
+
+static gboolean
+gis_ubuntu_report_page_apply (GisPage *page, GCancellable *cancellable)
+{
+  GisUbuntuReportPagePrivate *priv = gis_ubuntu_report_page_get_instance_private (GIS_UBUNTU_REPORT_PAGE (page));
+  g_autofree char *error = NULL;
+
+  if (gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (priv->opt_in_radio))) {
+    if (priv->report == NULL) {
+      error = sysmetrics_collect (&priv->report);
+      if (error != NULL) {
+        g_warning ("Failed to get report data: %s", error);
+        return FALSE;
+      }
+    }
+
+    error = sysmetrics_send_report (priv->report, FALSE, "");
+    if (error != NULL)
+      g_warning ("Failed to send report: %s", error);
+  } else {
+    error = sysmetrics_send_decline (FALSE, "");
+    if (error != NULL)
+      g_warning ("Failed to send decline: %s", error);
+  }
+
+  return FALSE;
+}
+
+static void
+gis_ubuntu_report_page_locale_changed (GisPage *page)
+{
+  GisUbuntuReportPagePrivate *priv = gis_ubuntu_report_page_get_instance_private (GIS_UBUNTU_REPORT_PAGE (page));
+  g_autofree gchar *timezone_text = NULL;
+  g_autofree gchar *description_text = NULL;
+  g_autoptr(GError) error = NULL;
+
+  gis_page_set_title (GIS_PAGE (page), _("Help improve Ubuntu"));
+
+  if (!g_file_get_contents ("/etc/timezone", &timezone_text, NULL, &error)) {
+    g_warning ("Failed to get timezone from /etc/timezone: %s", error->message);
+    return;
+  }
+
+  description_text = g_strdup_printf (_("Ubuntu can report information that helps developers improve it. "
+                                        "This includes things like the computer model, "
+					"what software is installed, "
+					"and the approximate location you chose (%s)."), g_strstrip (timezone_text));
+  gtk_label_set_label (GTK_LABEL (priv->description_label), description_text);
+}
+
+static void
+gis_ubuntu_report_page_class_init (GisUbuntuReportPageClass *klass)
+{
+  GisPageClass *page_class = GIS_PAGE_CLASS (klass);
+  GObjectClass *object_class = G_OBJECT_CLASS (klass);
+
+  gtk_widget_class_set_template_from_resource (GTK_WIDGET_CLASS (klass), "/org/gnome/initial-setup/gis-ubuntu-report-page.ui");
+  gtk_widget_class_bind_template_child_private (GTK_WIDGET_CLASS (klass), GisUbuntuReportPage, description_label);
+  gtk_widget_class_bind_template_child_private (GTK_WIDGET_CLASS (klass), GisUbuntuReportPage, opt_in_radio);
+  gtk_widget_class_bind_template_callback (GTK_WIDGET_CLASS (klass), show_report);
+  gtk_widget_class_bind_template_callback (GTK_WIDGET_CLASS (klass), show_legal);
+
+  page_class->page_id = PAGE_ID;
+  page_class->apply = gis_ubuntu_report_page_apply;
+  page_class->locale_changed = gis_ubuntu_report_page_locale_changed;
+  object_class->constructed = gis_ubuntu_report_page_constructed;
+  object_class->finalize = gis_ubuntu_report_page_finalize;
+}
+
+static void
+gis_ubuntu_report_page_init (GisUbuntuReportPage *page)
+{
+  g_resources_register (ubuntu_report_get_resource ());
+
+  gtk_widget_init_template (GTK_WIDGET (page));
+}
+
+GisPage *
+gis_prepare_ubuntu_report_page (GisDriver *driver)
+{
+  return g_object_new (GIS_TYPE_UBUNTU_REPORT_PAGE,
+                       "driver", driver,
+                       NULL);
+}
diff --git a/gnome-initial-setup/pages/ubuntu-report/gis-ubuntu-report-page.h b/gnome-initial-setup/pages/ubuntu-report/gis-ubuntu-report-page.h
new file mode 100644
index 0000000..9ba7500
--- /dev/null
+++ b/gnome-initial-setup/pages/ubuntu-report/gis-ubuntu-report-page.h
@@ -0,0 +1,52 @@
+/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
+/*
+ * Copyright (C) 2018 Canonical Ltd.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef __GIS_UBUNTU_REPORT_PAGE_H__
+#define __GIS_UBUNTU_REPORT_PAGE_H__
+
+#include "gnome-initial-setup.h"
+
+G_BEGIN_DECLS
+
+#define GIS_TYPE_UBUNTU_REPORT_PAGE            (gis_ubuntu_report_page_get_type ())
+#define GIS_UBUNTU_REPORT_PAGE(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GIS_TYPE_UBUNTU_REPORT_PAGE, GisUbuntuReportPage))
+#define GIS_UBUNTU_REPORT_PAGE_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass),  GIS_TYPE_UBUNTU_REPORT_PAGE, GisUbuntuReportPageClass))
+#define GIS_IS_UBUNTU_REPORT_PAGE(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GIS_TYPE_UBUNTU_REPORT_PAGE))
+#define GIS_IS_UBUNTU_REPORT_PAGE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass),  GIS_TYPE_UBUNTU_REPORT_PAGE))
+#define GIS_UBUNTU_REPORT_PAGE_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj),  GIS_TYPE_UBUNTU_REPORT_PAGE, GisUbuntuReportPageClass))
+
+typedef struct _GisUbuntuReportPage        GisUbuntuReportPage;
+typedef struct _GisUbuntuReportPageClass   GisUbuntuReportPageClass;
+
+struct _GisUbuntuReportPage
+{
+  GisPage parent;
+};
+
+struct _GisUbuntuReportPageClass
+{
+  GisPageClass parent_class;
+};
+
+GType gis_ubuntu_report_page_get_type (void);
+
+GisPage *gis_prepare_ubuntu_report_page (GisDriver *driver);
+
+G_END_DECLS
+
+#endif /* __GIS_UBUNTU_REPORT_PAGE_H__ */
diff --git a/gnome-initial-setup/pages/ubuntu-report/gis-ubuntu-report-page.ui b/gnome-initial-setup/pages/ubuntu-report/gis-ubuntu-report-page.ui
new file mode 100644
index 0000000..f5a40f8
--- /dev/null
+++ b/gnome-initial-setup/pages/ubuntu-report/gis-ubuntu-report-page.ui
@@ -0,0 +1,181 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<interface>
+  <!-- interface-requires gtk+ 3.0 -->
+  <template class="GisUbuntuReportPage" parent="GisPage">
+    <child>
+      <object class="GtkGrid">
+        <property name="visible">True</property>
+        <property name="can_focus">False</property>
+        <property name="row_spacing">40</property>
+	<property name="border_width">20</property>
+        <child>
+          <object class="GtkLabel" id="title">
+            <property name="visible">True</property>
+            <property name="can_focus">False</property>
+            <property name="halign">start</property>
+            <property name="valign">start</property>
+            <property name="label" translatable="yes">Help improve Ubuntu</property>
+            <attributes>
+              <attribute name="weight" value="bold"/>
+              <attribute name="scale" value="1.8"/>
+            </attributes>
+          </object>
+          <packing>
+            <property name="left_attach">0</property>
+            <property name="top_attach">0</property>
+            <property name="width">3</property>
+            <property name="height">1</property>
+          </packing>
+        </child>
+        <child>
+          <object class="GtkImage" id="icon_image">
+            <property name="visible">True</property>
+            <property name="can_focus">False</property>
+            <property name="valign">start</property>
+            <property name="halign">start</property>
+            <property name="resource">/org/gnome/initial-setup/ubuntu-report.svg</property>
+          </object>
+          <packing>
+            <property name="left_attach">0</property>
+            <property name="top_attach">1</property>
+            <property name="width">1</property>
+            <property name="height">1</property>
+          </packing>
+        </child>
+        <child>
+          <object class="GtkLabel" id="right_padding_label">
+            <property name="visible">True</property>
+          </object>
+          <packing>
+            <property name="left_attach">2</property>
+            <property name="top_attach">1</property>
+            <property name="width">1</property>
+            <property name="height">1</property>
+          </packing>
+        </child>
+        <child>
+          <object class="GtkBox">
+            <property name="visible">True</property>
+            <property name="can_focus">False</property>
+	    <property name="halign">center</property>
+	    <property name="hexpand">True</property>
+	    <property name="valign">start</property>
+	    <property name="vexpand">True</property>
+            <property name="orientation">vertical</property>
+            <child>
+              <object class="GtkLabel" id="description_label">
+                <property name="visible">True</property>
+                <property name="can_focus">False</property>
+                <property name="max-width-chars">50</property>
+                <property name="halign">center</property>
+                <property name="wrap">True</property>
+              </object>
+            </child>
+            <child>
+              <object class="GtkBox">
+                <property name="visible">True</property>
+                <property name="can_focus">False</property>
+                <property name="halign">start</property>
+                <property name="orientation">horizontal</property>
+                <property name="margin_top">18</property>
+                <property name="spacing">6</property>
+                <child>
+                  <object class="GtkButton">
+                    <property name="visible">True</property>
+                    <property name="label" translatable="yes">Show the First Report</property>
+                    <signal name="clicked" handler="show_report"/>
+                  </object>
+                </child>
+                <child>
+                  <object class="GtkButton">
+                    <property name="visible">True</property>
+                    <property name="label" translatable="yes">Legal notice</property>
+                    <signal name="clicked" handler="show_legal"/>
+                  </object>
+                </child>
+              </object>
+            </child>
+            <child>
+              <object class="GtkBox" id="question_box">
+                <property name="visible">True</property>
+                <property name="can_focus">False</property>
+                <property name="halign">center</property>
+                <property name="orientation">vertical</property>
+                <child>
+                  <object class="GtkLabel">
+                    <property name="visible">True</property>
+                    <property name="can_focus">False</property>
+                    <property name="margin_top">18</property>
+                    <property name="xalign">0</property>
+                    <property name="label" translatable="yes">Would you like to send this information?</property>
+                    <attributes>
+                      <attribute name="weight" value="bold"/>
+                    </attributes>
+                    <property name="wrap">True</property>
+                  </object>
+                </child>
+                <child>
+                  <object class="GtkRadioButton" id="opt_in_radio">
+                    <property name="visible">True</property>
+                    <property name="can_focus">True</property>
+                    <property name="margin_top">18</property>
+                    <property name="xalign">0</property>
+                    <property name="label" translatable="yes">Yes, send system info to Canonical</property>
+                  </object>
+                </child>
+                <child>
+                  <object class="GtkRadioButton" id="opt_out_radio">
+                    <property name="visible">True</property>
+                    <property name="can_focus">True</property>
+                    <property name="margin_top">6</property>
+                    <property name="xalign">0</property>
+                    <property name="label" translatable="yes">No, don't send system info</property>
+                    <property name="group">opt_in_radio</property>
+                  </object>
+                </child>
+              </object>
+            </child>
+            <child>
+              <object class="GtkLabel" id="footer_label">
+                <property name="visible">False</property> <!-- Disabled for now as setting doesn't exist - remove if we decide it's not necessary -->
+                <property name="can_focus">False</property>
+                <property name="label" translatable="yes">You can change your mind later in Settings -> Privacy -> Diagnostics.</property>
+                <property name="justify">center</property>
+                <property name="wrap">True</property>
+                <property name="margin_bottom">18</property>
+                <style>
+                  <class name="dim-label"/>
+                </style>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">True</property>
+                <property name="pack_type">end</property>
+              </packing>
+            </child>
+          </object>
+          <packing>
+            <property name="left_attach">1</property>
+            <property name="top_attach">1</property>
+            <property name="width">1</property>
+            <property name="height">1</property>
+          </packing>
+        </child>
+      </object>
+    </child>
+  </template>
+  <object class="GtkSizeGroup">
+    <property name="mode">horizontal</property>
+    <widgets>
+      <widget name="icon_image"/>
+      <widget name="right_padding_label"/>
+    </widgets>
+  </object>
+  <object class="GtkSizeGroup">
+    <property name="mode">horizontal</property>
+    <widgets>
+      <widget name="description_label"/>
+      <widget name="question_box"/>
+    </widgets>
+  </object>
+</interface>
diff --git a/gnome-initial-setup/pages/ubuntu-report/meson.build b/gnome-initial-setup/pages/ubuntu-report/meson.build
new file mode 100644
index 0000000..a0f949b
--- /dev/null
+++ b/gnome-initial-setup/pages/ubuntu-report/meson.build
@@ -0,0 +1,10 @@
+sources += gnome.compile_resources(
+    'ubuntu-report-resources',
+    files('ubuntu-report.gresource.xml'),
+    c_name: 'ubuntu_report'
+)
+
+sources += files(
+    'gis-ubuntu-report-page.c',
+    'gis-ubuntu-report-page.h',
+)
diff --git a/gnome-initial-setup/pages/ubuntu-report/ubuntu-report.gresource.xml b/gnome-initial-setup/pages/ubuntu-report/ubuntu-report.gresource.xml
new file mode 100644
index 0000000..6b28415
--- /dev/null
+++ b/gnome-initial-setup/pages/ubuntu-report/ubuntu-report.gresource.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<gresources>
+  <gresource prefix="/org/gnome/initial-setup">
+    <file preprocess="xml-stripblanks" alias="gis-ubuntu-report-page.ui">gis-ubuntu-report-page.ui</file>
+    <file alias="ubuntu-report.svg">ubuntu-report.svg</file>
+  </gresource>
+</gresources>
+
diff --git a/gnome-initial-setup/pages/ubuntu-report/ubuntu-report.svg b/gnome-initial-setup/pages/ubuntu-report/ubuntu-report.svg
new file mode 100644
index 0000000..8c1d52c
--- /dev/null
+++ b/gnome-initial-setup/pages/ubuntu-report/ubuntu-report.svg
@@ -0,0 +1 @@
+<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="Layer_1" x="0px" y="0px" width="150px" height="150px" viewBox="0 0 400 400" style="enable-background:new 0 0 400 400;" xml:space="preserve"> <style type="text/css"> .st0{fill:#666666; fill-opacity:0.25;} </style> <g> <path class="st0" d="M301.4,372.4C271.7,390,237,400,200,400C89.5,400,0,310.5,0,200C0,89.5,89.5,0,200,0c110.5,0,200,89.5,200,200 c0,36.4-9.7,70.6-26.8,100l0,0L400,400l-100-26.8L301.4,372.4L301.4,372.4z"/> </g> </svg>
diff --git a/meson.build b/meson.build
index fa67311..d7ec0f0 100644
--- a/meson.build
+++ b/meson.build
@@ -73,6 +73,9 @@ libmalcontent_ui_dep = dependency ('malcontent-ui-0',
 have_parental_controls = libmalcontent_dep.found() and libmalcontent_ui_dep.found()
 conf.set('HAVE_PARENTAL_CONTROLS', have_parental_controls)
 
+# Needed for the 'livepatch' page
+polkit = dependency('polkit-gobject-1', version : '>= 0.103')
+
 configure_file(output: 'config.h',
                configuration: conf)
 config_h_dir = include_directories('.')
diff --git a/po/POTFILES.in b/po/POTFILES.in
index f0310ef..9b1b23f 100644
--- a/po/POTFILES.in
+++ b/po/POTFILES.in
@@ -1,3 +1,4 @@
+data/com.ubuntu.welcome.policy.in
 data/gnome-initial-setup-first-login.desktop.in.in
 data/gnome-initial-setup.desktop.in.in
 gnome-initial-setup/cc-common-language.c
@@ -41,3 +42,12 @@ gnome-initial-setup/pages/timezone/gis-timezone-page.c
 gnome-initial-setup/pages/timezone/gis-timezone-page.ui
 gnome-initial-setup/pages/welcome/gis-welcome-page.c
 gnome-initial-setup/pages/welcome/gis-welcome-page.ui
+gnome-initial-setup/pages/timezone/gis-timezone-page.ui
+gnome-initial-setup/pages/ubuntu-report/gis-ubuntu-report-page.c
+gnome-initial-setup/pages/ubuntu-report/gis-ubuntu-report-page.ui
+gnome-initial-setup/pages/livepatch/gis-auth-dialog.c
+gnome-initial-setup/pages/livepatch/gis-auth-dialog.ui
+gnome-initial-setup/pages/livepatch/gis-livepatch-page.c
+gnome-initial-setup/pages/livepatch/gis-livepatch-page.ui
+gnome-initial-setup/pages/apps/gis-apps-page.c
+gnome-initial-setup/pages/apps/gis-apps-page.ui
