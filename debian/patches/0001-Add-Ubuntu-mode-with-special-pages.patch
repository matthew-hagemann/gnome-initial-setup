From: Robert Ancell <robert.ancell@canonical.com>
Date: Tue, 20 Mar 2018 11:51:30 +1300
Subject: Add Ubuntu mode with special pages

---
 data/its/polkit.its                                |   8 +
 data/its/polkit.loc                                |   6 +
 data/meson.build                                   |   1 -
 gnome-initial-setup/gis-driver.c                   |  30 +
 gnome-initial-setup/gis-driver.h                   |   6 +
 gnome-initial-setup/gnome-initial-setup.c          |  39 +-
 gnome-initial-setup/meson.build                    |   3 +
 gnome-initial-setup/pages/apps/app-center.svg      |   3 +
 gnome-initial-setup/pages/apps/apps.gresource.xml  |   9 +
 .../pages/apps/default-snap-icon.svg               |   1 +
 gnome-initial-setup/pages/apps/gis-apps-page.c     | 691 +++++++++++++++++++++
 gnome-initial-setup/pages/apps/gis-apps-page.h     |  52 ++
 gnome-initial-setup/pages/apps/gis-apps-page.ui    | 119 ++++
 gnome-initial-setup/pages/apps/meson.build         |  10 +
 gnome-initial-setup/pages/goa/gis-goa-page.c       |   7 +
 gnome-initial-setup/pages/meson.build              |   2 +
 .../pages/privacy/gis-privacy-page.c               |   2 +-
 .../pages/summary/gis-summary-page.c               |   2 +-
 .../pages/ubuntu-report/gis-ubuntu-report-page.c   | 461 ++++++++++++++
 .../pages/ubuntu-report/gis-ubuntu-report-page.h   |  52 ++
 .../pages/ubuntu-report/gis-ubuntu-report-page.ui  | 104 ++++
 .../pages/ubuntu-report/meson.build                |  10 +
 .../ubuntu-report/ubuntu-report.gresource.xml      |   8 +
 .../pages/ubuntu-report/ubuntu-report.svg          |   1 +
 po/POTFILES.in                                     |   5 +
 25 files changed, 1627 insertions(+), 5 deletions(-)
 create mode 100644 data/its/polkit.its
 create mode 100644 data/its/polkit.loc
 create mode 100644 gnome-initial-setup/pages/apps/app-center.svg
 create mode 100644 gnome-initial-setup/pages/apps/apps.gresource.xml
 create mode 100644 gnome-initial-setup/pages/apps/default-snap-icon.svg
 create mode 100644 gnome-initial-setup/pages/apps/gis-apps-page.c
 create mode 100644 gnome-initial-setup/pages/apps/gis-apps-page.h
 create mode 100644 gnome-initial-setup/pages/apps/gis-apps-page.ui
 create mode 100644 gnome-initial-setup/pages/apps/meson.build
 create mode 100644 gnome-initial-setup/pages/ubuntu-report/gis-ubuntu-report-page.c
 create mode 100644 gnome-initial-setup/pages/ubuntu-report/gis-ubuntu-report-page.h
 create mode 100644 gnome-initial-setup/pages/ubuntu-report/gis-ubuntu-report-page.ui
 create mode 100644 gnome-initial-setup/pages/ubuntu-report/meson.build
 create mode 100644 gnome-initial-setup/pages/ubuntu-report/ubuntu-report.gresource.xml
 create mode 100644 gnome-initial-setup/pages/ubuntu-report/ubuntu-report.svg

diff --git a/data/its/polkit.its b/data/its/polkit.its
new file mode 100644
index 0000000..c48ad3f
--- /dev/null
+++ b/data/its/polkit.its
@@ -0,0 +1,8 @@
+<?xml version="1.0"?>
+<its:rules xmlns:its="http://www.w3.org/2005/11/its"
+           version="2.0">
+  <its:translateRule selector="//*" translate="no"/>
+  <its:translateRule selector="//action/description |
+                               //action/message"
+                     translate="yes"/>
+</its:rules>
\ No newline at end of file
diff --git a/data/its/polkit.loc b/data/its/polkit.loc
new file mode 100644
index 0000000..12c7bf0
--- /dev/null
+++ b/data/its/polkit.loc
@@ -0,0 +1,6 @@
+<?xml version="1.0"?>
+<locatingRules>
+  <locatingRule name="polkit policy" pattern="*.policy">
+    <documentRule localName="policyconfig" target="polkit.its"/>
+  </locatingRule>
+</locatingRules>
\ No newline at end of file
diff --git a/data/meson.build b/data/meson.build
index 6a4ef7d..733aebb 100644
--- a/data/meson.build
+++ b/data/meson.build
@@ -103,7 +103,6 @@ if enable_systemd
     install_data('gnome-initial-setup.conf', install_dir: systemd_sysusersdir)
 endif
 
-
 rules_dir = join_paths(data_dir, 'polkit-1', 'rules.d')
 configure_file(
     input: '20-gnome-initial-setup.rules.in',
diff --git a/gnome-initial-setup/gis-driver.c b/gnome-initial-setup/gis-driver.c
index c4dba79..e4b572b 100644
--- a/gnome-initial-setup/gis-driver.c
+++ b/gnome-initial-setup/gis-driver.c
@@ -106,6 +106,9 @@ struct _GisDriver {
 
   const gchar *vendor_conf_file_path;
   GKeyFile *vendor_conf_file;
+
+  guint inhibit_count;
+  gboolean quit_requested;
 };
 
 G_DEFINE_TYPE (GisDriver, gis_driver, ADW_TYPE_APPLICATION)
@@ -941,6 +944,33 @@ gis_driver_save_data (GisDriver  *driver,
   return gis_assistant_save_data (driver->assistant, error);
 }
 
+void
+gis_driver_inhibit_quit (GisDriver *driver)
+{
+  driver->inhibit_count++;
+}
+
+void
+gis_driver_uninhibit_quit (GisDriver *driver)
+{
+  driver->inhibit_count--;
+  if (!driver->inhibit_count && driver->quit_requested)
+    gis_driver_quit (driver);
+}
+
+void gis_driver_quit (GisDriver *driver)
+{
+  if (driver->inhibit_count == 0)
+    {
+      g_application_quit (G_APPLICATION (driver));
+    }
+  else
+    {
+      driver->quit_requested = TRUE;
+      gtk_widget_hide (GTK_WIDGET (driver->main_window));
+    }
+  }
+
 GisDriver *
 gis_driver_new (GisDriverMode mode)
 {
diff --git a/gnome-initial-setup/gis-driver.h b/gnome-initial-setup/gis-driver.h
index 9b935e2..fc5ed02 100644
--- a/gnome-initial-setup/gis-driver.h
+++ b/gnome-initial-setup/gis-driver.h
@@ -121,6 +121,12 @@ gchar *gis_driver_conf_get_string (GisDriver *driver,
                                    const gchar *group,
                                    const gchar *key);
 
+void gis_driver_inhibit_quit (GisDriver *driver);
+
+void gis_driver_uninhibit_quit (GisDriver *driver);
+
+void gis_driver_quit (GisDriver *driver);
+
 GisDriver *gis_driver_new (GisDriverMode mode);
 
 G_END_DECLS
diff --git a/gnome-initial-setup/gnome-initial-setup.c b/gnome-initial-setup/gnome-initial-setup.c
index 4d14fea..c98ad18 100644
--- a/gnome-initial-setup/gnome-initial-setup.c
+++ b/gnome-initial-setup/gnome-initial-setup.c
@@ -41,6 +41,8 @@
 #include "pages/parental-controls/gis-parental-controls-page.h"
 #include "pages/password/gis-password-page.h"
 #include "pages/summary/gis-summary-page.h"
+#include "pages/ubuntu-report/gis-ubuntu-report-page.h"
+#include "pages/apps/gis-apps-page.h"
 
 #define VENDOR_PAGES_GROUP "pages"
 #define VENDOR_SKIP_KEY "skip"
@@ -80,6 +82,16 @@ static PageData page_table[] = {
   { NULL },
 };
 
+static PageData ubuntu_page_table[] = {
+  PAGE (goa,            FALSE),
+  PAGE (ubuntu_report,  FALSE),
+  PAGE (privacy,        FALSE),
+  PAGE (account,        TRUE),
+  PAGE (password,       TRUE),
+  PAGE (apps,           FALSE),
+  { NULL },
+};
+
 #undef PAGE
 
 static gboolean
@@ -190,6 +202,25 @@ destroy_page (gpointer data)
     gis_assistant_remove_page (GIS_ASSISTANT (assistant), page);
 }
 
+static gboolean
+is_desktop (const gchar *name)
+{
+  const gchar *xdg_current_desktop;
+  g_auto(GStrv) tokens = NULL;
+  int i;
+
+  xdg_current_desktop = g_getenv ("XDG_CURRENT_DESKTOP");
+  if (xdg_current_desktop == NULL)
+    return FALSE;
+
+  tokens = g_strsplit (xdg_current_desktop, ":", -1);
+  for (i = 0; tokens[i] != NULL; i++)
+    if (strcmp (tokens[i], name) == 0)
+      return TRUE;
+
+  return FALSE;
+}
+
 static void
 rebuild_pages_cb (GisDriver *driver)
 {
@@ -202,7 +233,11 @@ rebuild_pages_cb (GisDriver *driver)
 
   assistant = gis_driver_get_assistant (driver);
   current_page = gis_assistant_get_current_page (assistant);
-  page_data = page_table;
+
+  if (is_desktop ("ubuntu"))
+    page_data = ubuntu_page_table;
+  else
+    page_data = page_table;
 
   g_ptr_array_free (skipped_pages, TRUE);
   skipped_pages = g_ptr_array_new_with_free_func (destroy_page);
@@ -210,7 +245,7 @@ rebuild_pages_cb (GisDriver *driver)
   if (current_page != NULL) {
     destroy_pages_after (assistant, current_page);
 
-    for (page_data = page_table; page_data->page_id != NULL; ++page_data)
+    for (page_data = ubuntu_page_table; page_data->page_id != NULL; ++page_data) // FIXME conditional
       if (g_str_equal (page_data->page_id, GIS_PAGE_GET_CLASS (current_page)->page_id))
         break;
 
diff --git a/gnome-initial-setup/meson.build b/gnome-initial-setup/meson.build
index a6a014d..a40d16c 100644
--- a/gnome-initial-setup/meson.build
+++ b/gnome-initial-setup/meson.build
@@ -64,6 +64,9 @@ dependencies = [
     dependency ('libsecret-1', version: '>= 0.18.8'),
     dependency ('pwquality'),
     dependency ('rest-1.0'),
+    dependency ('snapd-glib-2'),
+    dependency ('libsoup-3.0'),
+    dependency ('sysmetrics'),
     ibus_dep,
     libmalcontent_dep,
     libmalcontent_ui_dep,
diff --git a/gnome-initial-setup/pages/apps/app-center.svg b/gnome-initial-setup/pages/apps/app-center.svg
new file mode 100644
index 0000000..a3cff0c
--- /dev/null
+++ b/gnome-initial-setup/pages/apps/app-center.svg
@@ -0,0 +1,3 @@
+<svg width="90" height="90" viewBox="0 0 90 90" fill="none" xmlns="http://www.w3.org/2000/svg">
+<path fill-rule="evenodd" clip-rule="evenodd" d="M45 0C34.8677 0 26.5401 7.86664 25.0049 18H13.5C6.05995 18 0 24.0599 0 31.5V76.5C0 83.94 6.05995 90 13.5 90H76.5C83.94 90 90 83.94 90 76.5V31.5C90 24.0599 83.94 18 76.5 18H64.9951C63.4599 7.86664 55.1323 0 45 0ZM45 4.5C52.5861 4.5 58.9764 10.2351 60.4336 18H29.5664C31.0236 10.2351 37.4139 4.5 45 4.5ZM40.3242 27H49.5967C51.4149 30.8441 53.1822 34.7414 54.8965 38.6895C56.6107 42.6375 58.3238 46.7887 60.0381 51.1523C60.9962 53.5194 61.9645 55.978 62.9385 58.5H65.25C68.9895 58.5 72 61.5105 72 65.25C72 68.0715 70.2816 70.4787 67.834 71.4902C68.9533 74.5273 70.0905 77.6666 71.2617 81H60.6621C59.9348 78.8701 59.1825 76.7674 58.4033 74.6895C58.0711 73.8036 57.7415 72.9048 57.4189 72H32.124C31.7984 72.9267 31.4663 73.8518 31.1309 74.7686L28.9512 81H18.7383C19.9105 77.6636 21.0371 74.521 22.1396 71.4814C19.7057 70.4638 18 68.0616 18 65.25C18 61.5105 21.0105 58.5 24.75 58.5H26.9648C27.9257 55.9778 28.8737 53.5195 29.8037 51.1523C31.5699 46.7887 33.3101 42.6375 35.0244 38.6895C36.7387 34.7414 38.506 30.8441 40.3242 27ZM44.7627 37.4414C43.5679 40.1946 42.1991 43.548 40.6406 47.4961C39.3433 50.896 37.9757 54.599 36.5625 58.5H52.9717C51.5509 54.5895 50.1575 50.864 48.8145 47.417C47.256 43.417 45.9055 40.0907 44.7627 37.4414ZM24.75 63C23.5035 63 22.5 64.0035 22.5 65.25C22.5 66.4965 23.5035 67.5 24.75 67.5H65.25C66.4965 67.5 67.5 66.4965 67.5 65.25C67.5 64.0035 66.4965 63 65.25 63H24.75Z" fill="#E95420"/>
+</svg>
diff --git a/gnome-initial-setup/pages/apps/apps.gresource.xml b/gnome-initial-setup/pages/apps/apps.gresource.xml
new file mode 100644
index 0000000..6313a06
--- /dev/null
+++ b/gnome-initial-setup/pages/apps/apps.gresource.xml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<gresources>
+  <gresource prefix="/org/gnome/initial-setup">
+    <file preprocess="xml-stripblanks" alias="gis-apps-page.ui">gis-apps-page.ui</file>
+    <file preprocess="xml-stripblanks">default-snap-icon.svg</file>
+    <file preprocess="xml-stripblanks">app-center.svg</file>
+  </gresource>
+</gresources>
+
diff --git a/gnome-initial-setup/pages/apps/default-snap-icon.svg b/gnome-initial-setup/pages/apps/default-snap-icon.svg
new file mode 100644
index 0000000..0d8dd94
--- /dev/null
+++ b/gnome-initial-setup/pages/apps/default-snap-icon.svg
@@ -0,0 +1 @@
+<svg width="96" height="96" xmlns="http://www.w3.org/2000/svg"><circle fill="#F7F7F7" cx="48" cy="48" r="48"/><path d="M55.71 53.294V32.766l14.248 6.28L55.71 53.293zM28.901 80.102L46.049 47.74l7.728 7.486-24.875 24.876zM19 19l35.502 12.8v22.702L19 19zm58.204 12.8L83 43.634 56.675 31.8h20.529z" fill="#CDCDCD"/></svg>
\ No newline at end of file
diff --git a/gnome-initial-setup/pages/apps/gis-apps-page.c b/gnome-initial-setup/pages/apps/gis-apps-page.c
new file mode 100644
index 0000000..3abc3b3
--- /dev/null
+++ b/gnome-initial-setup/pages/apps/gis-apps-page.c
@@ -0,0 +1,691 @@
+/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
+/*
+ * Copyright (C) 2018 Canonical Ltd.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see <http://www.gnu.org/licenses/>.
+ */
+
+/* Get more apps page {{{1 */
+
+#define PAGE_ID "apps"
+
+#include "config.h"
+#include "gis-apps-page.h"
+#include "apps-resources.h"
+
+#include <glib/gi18n.h>
+#include <gio/gio.h>
+#include <snapd-glib/snapd-glib.h>
+#include <libsoup/soup.h>
+
+#define ICONS_SIZE 64
+
+struct _GisAppsPagePrivate {
+  SoupSession *soup_session;
+  SnapdClient *client;
+
+  GtkWidget *main_stack;
+  GtkWidget *spinner;
+  GtkWidget *featured_stack;
+  GtkWidget *prev_featured_button;
+  GtkWidget *next_featured_button;
+
+  GCancellable *cancellable;
+  guint featured_snaps_timeout_id;
+
+  GPtrArray *installed_snaps;
+  GPtrArray *featured_snaps;
+};
+typedef struct _GisAppsPagePrivate GisAppsPagePrivate;
+
+G_DEFINE_TYPE_WITH_PRIVATE (GisAppsPage, gis_apps_page, GIS_TYPE_PAGE);
+
+struct _GisSnapTile
+{
+  GtkFlowBoxChild parent;
+  SnapdSnap *snap;
+  SoupSession *soup_session;
+  GtkWidget *icon;
+};
+G_DECLARE_FINAL_TYPE (GisSnapTile, gis_snap_tile, GIS, SNAP_TILE, GtkFlowBoxChild)
+G_DEFINE_TYPE (GisSnapTile, gis_snap_tile, GTK_TYPE_FLOW_BOX_CHILD)
+
+static void
+gis_snap_tile_init (GisSnapTile *item)
+{
+}
+
+static void
+gis_snap_tile_finalize (GObject *object)
+{
+  g_clear_object (&GIS_SNAP_TILE (object)->snap);
+  g_clear_object (&GIS_SNAP_TILE (object)->soup_session);
+  G_OBJECT_CLASS (gis_snap_tile_parent_class)->finalize (object);
+}
+
+static void
+gis_snap_tile_class_init (GisSnapTileClass *klass)
+{
+  GObjectClass *object_class = G_OBJECT_CLASS (klass);
+
+  object_class->finalize = gis_snap_tile_finalize;
+}
+
+static void
+gis_apps_page_constructed (GObject *object)
+{
+  GisAppsPage *page = GIS_APPS_PAGE (object);
+
+  G_OBJECT_CLASS (gis_apps_page_parent_class)->constructed (object);
+
+  gis_page_set_skippable (GIS_PAGE (page), TRUE);
+
+  gis_page_set_complete (GIS_PAGE (page), TRUE);
+  gtk_widget_show (GTK_WIDGET (page));
+}
+
+static void
+gis_apps_page_dispose (GObject *object)
+{
+  GisAppsPage *page = GIS_APPS_PAGE (object);
+  GisAppsPagePrivate *priv = gis_apps_page_get_instance_private (page);
+
+  g_clear_object (&priv->client);
+  g_clear_object (&priv->soup_session);
+  g_clear_pointer (&priv->installed_snaps, g_ptr_array_unref);
+  g_clear_pointer (&priv->featured_snaps, g_ptr_array_unref);
+
+  g_cancellable_cancel (priv->cancellable);
+  g_clear_object (&priv->cancellable);
+
+  if (priv->featured_snaps_timeout_id != 0) {
+    g_source_remove (priv->featured_snaps_timeout_id);
+    priv->featured_snaps_timeout_id = 0;
+  }
+
+  G_OBJECT_CLASS (gis_apps_page_parent_class)->dispose (object);
+}
+
+static void
+open_software (GtkButton      *button,
+               const gchar    *uri,
+               GisAppsPage *page)
+{
+  g_autofree gchar *command = NULL;
+  g_autoptr(GAppInfo) info = NULL;
+  g_autoptr(GError) error = NULL;
+
+  g_autofree gchar *storecmd = NULL;
+
+  storecmd = g_find_program_in_path ("snap-store.ubuntu-software");
+  if (storecmd == NULL)
+    storecmd = g_find_program_in_path ("snap-store");
+  if (storecmd == NULL)
+    storecmd = g_find_program_in_path ("gnome-software");
+  if (storecmd == NULL) {
+    g_warning ("Failed to find snap-store or gnome-software");
+    return;
+  }
+
+  info = g_app_info_create_from_commandline (storecmd, NULL, G_APP_INFO_CREATE_NONE, &error);
+  if (info == NULL) {
+     g_warning ("Failed to get launch information from gnome-software: %s", error->message);
+     return;
+  }
+  if (!g_app_info_launch (info, NULL, NULL, &error)) {
+     g_warning ("Failed to launch gnome-software: %s", error->message);
+     return;
+  }
+}
+
+static gboolean
+gis_apps_page_apply (GisPage *page, GCancellable *cancellable)
+{
+  gis_ensure_stamp_files (GIS_PAGE (page)->driver);
+  gis_driver_quit (GIS_PAGE (page)->driver);
+  return FALSE;
+}
+
+static void
+gis_apps_page_locale_changed (GisPage *page)
+{
+  gis_page_set_title (GIS_PAGE (page), _("Ready to go"));
+}
+
+static void
+next_page (GtkWidget *stack, GtkWidget *prev_button, GtkWidget *next_button)
+{
+  GtkWidget *visible_child;
+
+  visible_child = gtk_stack_get_visible_child (GTK_STACK (stack));
+
+  if (visible_child) {
+    GtkWidget *next_sibling = gtk_widget_get_next_sibling (visible_child);
+
+    if (next_sibling) {
+      gtk_stack_set_transition_type (GTK_STACK (stack), GTK_STACK_TRANSITION_TYPE_SLIDE_LEFT);
+      gtk_stack_set_visible_child (GTK_STACK (stack), next_sibling);
+      gtk_widget_set_sensitive (prev_button, TRUE);
+      gtk_widget_set_sensitive (next_button, gtk_widget_get_next_sibling (next_sibling) != NULL);
+    }
+  }
+}
+
+static void
+prev_page (GtkWidget *stack, GtkWidget *prev_button, GtkWidget *next_button)
+{
+  GtkWidget *visible_child;
+
+  visible_child = gtk_stack_get_visible_child (GTK_STACK (stack));
+
+  if (visible_child) {
+    GtkWidget *prev_sibling = gtk_widget_get_prev_sibling (visible_child);
+
+    if (prev_sibling) {
+      gtk_stack_set_transition_type (GTK_STACK (stack), GTK_STACK_TRANSITION_TYPE_SLIDE_RIGHT);
+      gtk_stack_set_visible_child (GTK_STACK (stack), prev_sibling);
+      gtk_widget_set_sensitive (prev_button, gtk_widget_get_prev_sibling (prev_sibling) != NULL);
+      gtk_widget_set_sensitive (next_button, TRUE);
+    }
+  }
+}
+
+static void
+prev_featured (GtkButton   *button,
+               GisAppsPage *page)
+{
+  GisAppsPagePrivate *priv = gis_apps_page_get_instance_private (page);
+  prev_page (priv->featured_stack, priv->prev_featured_button, priv->next_featured_button);
+}
+
+static void
+next_featured (GtkButton   *button,
+               GisAppsPage *page)
+{
+  GisAppsPagePrivate *priv = gis_apps_page_get_instance_private (page);
+  next_page (priv->featured_stack, priv->prev_featured_button, priv->next_featured_button);
+}
+
+static void
+gis_apps_page_class_init (GisAppsPageClass *klass)
+{
+  GisPageClass *page_class = GIS_PAGE_CLASS (klass);
+  GObjectClass *object_class = G_OBJECT_CLASS (klass);
+
+  gtk_widget_class_set_template_from_resource (GTK_WIDGET_CLASS (klass), "/org/gnome/initial-setup/gis-apps-page.ui");
+  gtk_widget_class_bind_template_child_private (GTK_WIDGET_CLASS (klass), GisAppsPage, main_stack);
+  gtk_widget_class_bind_template_child_private (GTK_WIDGET_CLASS (klass), GisAppsPage, spinner);
+  gtk_widget_class_bind_template_child_private (GTK_WIDGET_CLASS (klass), GisAppsPage, featured_stack);
+  gtk_widget_class_bind_template_child_private (GTK_WIDGET_CLASS (klass), GisAppsPage, prev_featured_button);
+  gtk_widget_class_bind_template_child_private (GTK_WIDGET_CLASS (klass), GisAppsPage, next_featured_button);
+  gtk_widget_class_bind_template_callback (GTK_WIDGET_CLASS (klass), open_software);
+  gtk_widget_class_bind_template_callback (GTK_WIDGET_CLASS (klass), prev_featured);
+  gtk_widget_class_bind_template_callback (GTK_WIDGET_CLASS (klass), next_featured);
+
+  page_class->page_id = PAGE_ID;
+  page_class->apply = gis_apps_page_apply;
+  page_class->locale_changed = gis_apps_page_locale_changed;
+  object_class->constructed = gis_apps_page_constructed;
+  object_class->dispose = gis_apps_page_dispose;
+}
+
+static GdkPaintable *
+load_snap_icon (SnapdSnap *snap)
+{
+  const gchar *url;
+  g_autoptr(SnapdClient) client = NULL;
+  g_autoptr(SnapdIcon) icon = NULL;
+  g_autoptr(GInputStream) input_stream = NULL;
+  g_autoptr(GdkTexture) texture = NULL;
+  g_autoptr(GError) error = NULL;
+
+  url = snapd_snap_get_icon (snap);
+  if (url == NULL || !g_str_has_prefix (url, "/v2/icons/"))
+    return NULL;
+
+  client = snapd_client_new ();
+  icon = snapd_client_get_icon_sync (client, snapd_snap_get_name (snap), NULL, &error);
+  if (icon == NULL) {
+     g_warning ("Failed to get snap icon: %s", error->message);
+     return NULL;
+  }
+
+  texture = gdk_texture_new_from_bytes (snapd_icon_get_data (icon), &error);
+  if (texture == NULL) {
+     g_warning ("Failed to decode snap icon: %s", error->message);
+     return NULL;
+  }
+
+  return GDK_PAINTABLE (g_steal_pointer (&texture));
+}
+
+static GdkPaintable *
+load_local_icon (GisSnapTile *tile, const gchar *name, GError **error)
+{
+  if (name && name[0] == '/') {
+    g_autoptr (GFile) file = g_file_new_for_path (name);
+    GdkTexture *texture = gdk_texture_new_from_file (file, error);
+
+    if (!texture)
+      return NULL;
+
+    return GDK_PAINTABLE (texture);
+  } else {
+    GtkIconTheme *icon_theme;
+    g_autoptr (GtkIconPaintable) icon = NULL;
+
+    icon_theme = gtk_icon_theme_get_for_display (gtk_widget_get_display (GTK_WIDGET (tile)));
+    icon = gtk_icon_theme_lookup_icon (icon_theme, name, NULL, ICONS_SIZE,
+                                       gtk_widget_get_scale_factor (GTK_WIDGET (tile)),
+                                       gtk_widget_get_direction (GTK_WIDGET (tile)),
+                                       0);
+
+    if (!icon)
+      return NULL;
+
+    return GDK_PAINTABLE (g_steal_pointer (&icon));
+  }
+}
+
+static GdkPaintable *
+load_desktop_icon (GisSnapTile *tile)
+{
+  SnapdSnap *snap = tile->snap;
+  GPtrArray *apps;
+  guint i;
+
+  apps = snapd_snap_get_apps (snap);
+  for (i = 0; i < apps->len; i++) {
+    SnapdApp *app = g_ptr_array_index (apps, i);
+    const gchar *desktop_file_path;
+    g_autoptr(GKeyFile) desktop_file = NULL;
+    g_autofree gchar *icon = NULL;
+    g_autoptr(GdkPaintable) paintable = NULL;
+    g_autoptr(GError) error = NULL;
+
+    desktop_file_path = snapd_app_get_desktop_file (app);
+    if (desktop_file_path == NULL)
+      continue;
+
+    desktop_file = g_key_file_new ();
+    if (!g_key_file_load_from_file (desktop_file, desktop_file_path, G_KEY_FILE_NONE, &error)) {
+      g_warning ("Failed to load desktop file %s: %s", desktop_file_path, error->message);
+      continue;
+    }
+
+    icon = g_key_file_get_string (desktop_file, G_KEY_FILE_DESKTOP_GROUP, G_KEY_FILE_DESKTOP_KEY_ICON, &error);
+    if (icon == NULL) {
+      g_warning ("Failed to get desktop file icon %s: %s", desktop_file_path, error->message);
+      continue;
+    }
+
+    paintable = load_local_icon (tile, icon, &error);
+    if (paintable == NULL) {
+      g_warning ("Failed to load icon %s: %s", icon, error->message);
+      continue;
+    }
+
+    return g_steal_pointer (&paintable);
+  }
+
+  return NULL;
+}
+
+static void
+icon_pixbuf_new_cb (GObject *object, GAsyncResult *result, gpointer user_data)
+{
+  g_autoptr (GTask) task = user_data;
+  g_autoptr(GdkTexture) texture = NULL;
+  g_autoptr(GError) error = NULL;
+  g_autoptr(GdkPixbuf) pixbuf = NULL;
+  GisSnapTile *tile = g_task_get_task_data (task);
+
+  pixbuf = gdk_pixbuf_new_from_stream_finish (result, &error);
+  if (pixbuf == NULL) {
+    g_warning ("Failed to load icon: %s", error->message);
+    return;
+  }
+
+  gtk_image_set_from_pixbuf (GTK_IMAGE (tile->icon), pixbuf);
+}
+
+static void
+icon_cb (GObject *object, GAsyncResult *result, gpointer user_data)
+{
+  g_autoptr (GTask) task = user_data;
+  GCancellable *cancellable = g_task_get_cancellable (task);
+  g_autoptr(GInputStream) stream = NULL;
+  g_autoptr(GdkPixbuf) pixbuf = NULL;
+  g_autoptr(GError) error = NULL;
+
+  stream = soup_session_send_finish (SOUP_SESSION (object), result, &error);
+  if (stream == NULL) {
+    g_warning ("Failed to download icon: %s", error->message);
+    return;
+  }
+
+  gdk_pixbuf_new_from_stream_at_scale_async (stream, -1, -1, TRUE, cancellable,
+                                             icon_pixbuf_new_cb,
+                                             g_steal_pointer (&task));
+}
+
+static void
+load_store_icon (GisSnapTile *tile, GCancellable *cancellable)
+{
+  g_autoptr (GTask) task = NULL;
+  const gchar *url;
+  g_autoptr(SoupMessage) message = NULL;
+
+  url = snapd_snap_get_icon (tile->snap);
+  if (url == NULL || !(g_str_has_prefix (url, "http://") || g_str_has_prefix (url, "https://")))
+    return;
+
+  task = g_task_new (tile, cancellable, NULL, NULL);
+  g_task_set_task_data (task, g_object_ref (tile), g_object_unref);
+
+  message = soup_message_new ("GET", url);
+  soup_session_send_async (tile->soup_session, message, G_PRIORITY_DEFAULT,
+                           cancellable, icon_cb, g_steal_pointer (&task));
+}
+
+static void
+load_icon (GisSnapTile *tile, GCancellable *cancellable)
+{
+  g_autoptr(GdkPaintable) paintable = NULL;
+  g_autoptr(GError) error = NULL;
+
+  /* Add placeholder icon */
+  gtk_image_set_from_resource (GTK_IMAGE (tile->icon),
+    "/org/gnome/initial-setup/default-snap-icon.svg");
+
+  paintable = load_snap_icon (tile->snap);
+  if (paintable != NULL) {
+    gtk_image_set_from_paintable (GTK_IMAGE (tile->icon), paintable);
+    return;
+  }
+
+  paintable = load_desktop_icon (tile);
+  if (paintable != NULL) {
+    gtk_image_set_from_paintable (GTK_IMAGE (tile->icon), paintable);
+    return;
+  }
+
+  load_store_icon (tile, cancellable);
+}
+
+static GtkWidget *
+gis_snap_tile_new (SnapdSnap *snap, SoupSession *soup_session, GCancellable *cancellable)
+{
+  const gchar *title;
+  GisSnapTile *tile;
+  GtkWidget *box, *label;
+
+  tile = g_object_new (gis_snap_tile_get_type (), NULL);
+  tile->snap = g_object_ref (snap);
+  tile->soup_session = g_object_ref (soup_session);
+
+  title = snapd_snap_get_title (snap);
+  if (title == NULL)
+    title = snapd_snap_get_name (snap);
+
+  box = gtk_box_new (GTK_ORIENTATION_VERTICAL, 6);
+  gtk_flow_box_child_set_child (GTK_FLOW_BOX_CHILD (tile), box);
+  gtk_widget_set_halign (box, GTK_ALIGN_CENTER);
+  gtk_widget_set_valign (box, GTK_ALIGN_CENTER);
+
+  tile->icon = gtk_image_new ();
+  gtk_image_set_pixel_size (GTK_IMAGE (tile->icon), 64);
+  gtk_box_append (GTK_BOX (box), tile->icon);
+
+  label = gtk_label_new (title);
+  gtk_label_set_justify (GTK_LABEL (label), GTK_JUSTIFY_CENTER);
+  gtk_label_set_wrap (GTK_LABEL (label), TRUE);
+  gtk_box_append (GTK_BOX (box), label);
+
+  load_icon (tile, cancellable);
+
+  return GTK_WIDGET (tile);
+}
+
+static gboolean
+contains_snap (GPtrArray *snaps, const gchar *name)
+{
+  guint i;
+
+  for (i = 0; i < snaps->len; i++) {
+    SnapdSnap *snap = g_ptr_array_index (snaps, i);
+    if (g_strcmp0 (snapd_snap_get_name (snap), name) == 0)
+      return TRUE;
+  }
+
+  return FALSE;
+}
+
+static void
+on_app_clicked (GtkWidget *flow_box, GtkFlowBoxChild *child, gpointer user_data)
+{
+  GisSnapTile *tile = NULL;
+  g_autofree gchar *url = NULL;
+  g_autoptr (GError) error = NULL;
+
+  if (!GIS_IS_SNAP_TILE (child))
+      return;
+
+  tile = GIS_SNAP_TILE (child);
+
+  url = g_strdup_printf ("snap://%s", snapd_snap_get_name (tile->snap));
+  if (!g_app_info_launch_default_for_uri (url, NULL, &error))
+     g_warning ("Failed to open %s: %s", url, error->message);
+}
+
+static void
+add_tile (GtkWidget *stack, GtkWidget *tile)
+{
+  GtkWidget *flow_box = NULL;
+  GtkWidget *child;
+  gint count = 0;
+
+  flow_box = gtk_widget_get_last_child (stack);
+  for (child = flow_box ? gtk_widget_get_first_child (flow_box) : NULL;
+       child != NULL;
+       child = gtk_widget_get_next_sibling (child)) {
+        count++;
+  }
+
+  if (flow_box == NULL || count >= 15) {
+    count = 0;
+    flow_box = gtk_flow_box_new ();
+    gtk_flow_box_set_min_children_per_line (GTK_FLOW_BOX (flow_box), 5);
+    gtk_flow_box_set_max_children_per_line (GTK_FLOW_BOX (flow_box), 5);
+    gtk_flow_box_set_selection_mode (GTK_FLOW_BOX (flow_box), GTK_SELECTION_NONE);
+    g_signal_connect (flow_box, "child-activated",
+                      G_CALLBACK (on_app_clicked), NULL);
+    gtk_widget_show (flow_box);
+    gtk_flow_box_set_row_spacing (GTK_FLOW_BOX (flow_box), 10);
+    gtk_flow_box_set_column_spacing (GTK_FLOW_BOX (flow_box), 10);
+    gtk_stack_add_child (GTK_STACK (stack), flow_box);
+  }
+
+  gtk_flow_box_append (GTK_FLOW_BOX (flow_box), tile);
+}
+
+static void
+gis_app_page_populate_featured_snaps (GisAppsPage *page)
+{
+    GisAppsPagePrivate *priv = gis_apps_page_get_instance_private (page);
+    GtkSizeGroup *size_group;
+    guint i, n_tiles = 0, n_extra = 0;
+    GtkWidget *first_child;
+
+    size_group = gtk_size_group_new (GTK_SIZE_GROUP_BOTH);
+
+    for (i = 0; i < priv->featured_snaps->len; i++) {
+      SnapdSnap *snap = g_ptr_array_index (priv->featured_snaps, i);
+      GtkWidget *tile;
+
+      /* Skip if already installed */
+      if (priv->installed_snaps != NULL && contains_snap (priv->installed_snaps, snapd_snap_get_name (snap)))
+        continue;
+
+      tile = gis_snap_tile_new (snap, priv->soup_session, priv->cancellable);
+      gtk_widget_show (tile);
+      gtk_size_group_add_widget (size_group, tile);
+
+      add_tile (priv->featured_stack, tile);
+      n_tiles += 1;
+    }
+
+    /* Add spacers to fill up page */
+    if (n_tiles % 15 != 0)
+      n_extra = 15 - n_tiles % 15;
+    for (i = 0; i < n_extra; i++) {
+      GtkWidget *spacer = gtk_label_new ("");
+      gtk_widget_show (spacer);
+      gtk_size_group_add_widget (size_group, spacer);
+      add_tile (priv->featured_stack, spacer);
+    }
+
+    first_child = gtk_widget_get_first_child (priv->featured_stack);
+    gtk_widget_set_visible (priv->next_featured_button,
+      first_child && gtk_widget_get_next_sibling (first_child) != NULL);
+
+    gtk_widget_set_visible (priv->prev_featured_button,
+      first_child && gtk_widget_get_next_sibling (first_child) != NULL);
+}
+
+static void
+gis_apps_page_try_to_get_featured_snaps (GisAppsPage *page);
+
+static void
+gis_app_page_on_featured_snaps_ready (GObject *source_object,
+                                      GAsyncResult *res,
+                                      gpointer user_data)
+{
+  SnapdClient *client = SNAPD_CLIENT (source_object);
+  g_autoptr(GPtrArray) featured_snaps = NULL;
+  g_autoptr(GError) error = NULL;
+
+  featured_snaps = snapd_client_find_section_finish (client, res, NULL, &error);
+
+  if (featured_snaps == NULL) {
+    if (!g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED)) {
+      g_warning ("Failed to get featured snaps: %s", error->message);
+      /* On a fresh boot interacting with snapd can fail (see LP: #1824188).
+       * In case of error, try to get the featured snaps again.*/
+      gis_apps_page_try_to_get_featured_snaps (GIS_APPS_PAGE (user_data));
+    }
+  } else {
+    GisAppsPage *page = GIS_APPS_PAGE (user_data);
+    GisAppsPagePrivate *priv = gis_apps_page_get_instance_private (page);
+
+    priv->featured_snaps = g_steal_pointer (&featured_snaps);
+
+    gtk_spinner_stop (GTK_SPINNER (priv->spinner));
+    gtk_stack_set_visible_child_name (GTK_STACK (priv->main_stack), "page_snaps");
+
+    gis_app_page_populate_featured_snaps (page);
+  }
+}
+
+static gboolean
+gis_app_page_get_featured_snaps_timeout (gpointer user_data)
+{
+  GisAppsPage *page = GIS_APPS_PAGE (user_data);
+  GisAppsPagePrivate *priv = gis_apps_page_get_instance_private (page);
+
+  priv->featured_snaps_timeout_id = 0;
+
+  snapd_client_find_section_async (priv->client,
+                                   SNAPD_FIND_FLAGS_NONE,
+                                   "ubuntu-firstrun",
+                                   NULL,
+                                   priv->cancellable,
+                                   gis_app_page_on_featured_snaps_ready,
+                                   page);
+
+  return G_SOURCE_REMOVE;
+}
+
+void
+gis_apps_page_try_to_get_featured_snaps (GisAppsPage *page)
+{
+  GisAppsPagePrivate *priv = gis_apps_page_get_instance_private (page);
+
+  g_return_if_fail (priv->featured_snaps == NULL);
+
+  if (priv->featured_snaps_timeout_id == 0)
+    priv->featured_snaps_timeout_id = g_timeout_add_seconds (1, gis_app_page_get_featured_snaps_timeout, page);
+}
+
+void
+gis_app_page_on_installed_snaps_ready (GObject *source_object,
+                                       GAsyncResult *res,
+                                       gpointer user_data)
+{
+  GisAppsPage *page;
+  GisAppsPagePrivate *priv;
+  SnapdClient *client = SNAPD_CLIENT (source_object);
+  g_autoptr(GPtrArray) installed_snaps = NULL;
+  g_autoptr(GError) error = NULL;
+
+  installed_snaps = snapd_client_get_snaps_finish (client, res, &error);
+  if (installed_snaps == NULL) {
+    if (!g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED)) {
+      /* Discard errors in getting the list of installed snaps. Print out a
+       * warning here and avoid to use installed_snaps to filter the featured
+       * snaps. */
+      g_warning ("Failed to get installed snaps: %s", error->message);
+    } else {
+      return;
+    }
+  }
+
+  page = GIS_APPS_PAGE (user_data);
+  priv = gis_apps_page_get_instance_private (page);
+
+  priv->installed_snaps = g_steal_pointer (&installed_snaps);
+  gis_apps_page_try_to_get_featured_snaps (page);
+}
+
+static void
+gis_apps_page_init (GisAppsPage *page)
+{
+  GisAppsPagePrivate *priv = gis_apps_page_get_instance_private (page);
+
+  g_resources_register (apps_get_resource ());
+
+  gtk_widget_init_template (GTK_WIDGET (page));
+
+  priv->soup_session = soup_session_new ();
+  priv->client = snapd_client_new ();
+  priv->cancellable = g_cancellable_new ();
+
+  gtk_stack_set_visible_child_name (GTK_STACK (priv->main_stack), "page_spinner");
+  gtk_spinner_start (GTK_SPINNER (priv->spinner));
+
+  snapd_client_get_snaps_async (priv->client,
+                                SNAPD_GET_SNAPS_FLAGS_NONE,
+                                NULL,
+                                priv->cancellable,
+                                gis_app_page_on_installed_snaps_ready,
+                                page);
+}
+
+GisPage *
+gis_prepare_apps_page (GisDriver *driver)
+{
+  return g_object_new (GIS_TYPE_APPS_PAGE,
+                       "driver", driver,
+                       NULL);
+}
diff --git a/gnome-initial-setup/pages/apps/gis-apps-page.h b/gnome-initial-setup/pages/apps/gis-apps-page.h
new file mode 100644
index 0000000..9494b9e
--- /dev/null
+++ b/gnome-initial-setup/pages/apps/gis-apps-page.h
@@ -0,0 +1,52 @@
+/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
+/*
+ * Copyright (C) 2018 Canonical Ltd.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef __GIS_APPS_PAGE_H__
+#define __GIS_APPS_PAGE_H__
+
+#include "gnome-initial-setup.h"
+
+G_BEGIN_DECLS
+
+#define GIS_TYPE_APPS_PAGE            (gis_apps_page_get_type ())
+#define GIS_APPS_PAGE(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GIS_TYPE_APPS_PAGE, GisAppsPage))
+#define GIS_APPS_PAGE_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass),  GIS_TYPE_APPS_PAGE, GisAppsPageClass))
+#define GIS_IS_APPS_PAGE(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GIS_TYPE_APPS_PAGE))
+#define GIS_IS_APPS_PAGE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass),  GIS_TYPE_APPS_PAGE))
+#define GIS_APPS_PAGE_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj),  GIS_TYPE_APPS_PAGE, GisAppsPageClass))
+
+typedef struct _GisAppsPage        GisAppsPage;
+typedef struct _GisAppsPageClass   GisAppsPageClass;
+
+struct _GisAppsPage
+{
+  GisPage parent;
+};
+
+struct _GisAppsPageClass
+{
+  GisPageClass parent_class;
+};
+
+GType gis_apps_page_get_type (void);
+
+GisPage *gis_prepare_apps_page (GisDriver *driver);
+
+G_END_DECLS
+
+#endif /* __GIS_APPS_PAGE_H__ */
diff --git a/gnome-initial-setup/pages/apps/gis-apps-page.ui b/gnome-initial-setup/pages/apps/gis-apps-page.ui
new file mode 100644
index 0000000..103f2f9
--- /dev/null
+++ b/gnome-initial-setup/pages/apps/gis-apps-page.ui
@@ -0,0 +1,119 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<interface>
+  <requires lib="gtk" version="4.0"/>
+  <template class="GisAppsPage" parent="GisPage">
+
+    <child>
+      <object class="AdwPreferencesPage">
+
+        <child>
+          <object class="AdwPreferencesGroup">
+            <child>
+              <object class="GtkImage">
+                <property name="resource">/org/gnome/initial-setup/app-center.svg</property>
+                <property name="height-request">77</property>
+              </object>
+            </child>
+          </object>
+        </child>
+        <child>
+          <object class="AdwPreferencesGroup">
+            <child>
+              <object class="GisPageHeader">
+                <property name="title" translatable="yes">You&apos;re ready to go!</property>
+                <property name="subtitle" translatable="yes">You can use App Center to install apps like these:</property>
+                <property name="show-icon">0</property>
+              </object>
+            </child>
+          </object>
+        </child>
+
+        <child>
+          <object class="AdwPreferencesGroup">
+          <child>
+            <object class="GtkBox">
+              <property name="orientation">vertical</property>
+              <child>
+                <object class="GtkStack" id="main_stack">
+                  <property name="margin_top">6</property>
+                  <property name="hexpand">1</property>
+                  <property name="transition_type">crossfade</property>
+                  <child>
+                    <object class="GtkStackPage">
+                      <property name="name">page_spinner</property>
+                      <property name="child">
+                        <object class="GtkSpinner" id="spinner"/>
+                      </property>
+                    </object>
+                  </child>
+                  <child>
+                    <object class="GtkStackPage">
+                      <property name="name">page_snaps</property>
+                      <property name="child">
+                        <object class="GtkBox">
+                          <property name="hexpand">1</property>
+                          <property name="spacing">10</property>
+                          <child>
+                            <object class="GtkButton" id="prev_featured_button">
+                              <property name="visible">0</property>
+                              <property name="sensitive">0</property>
+                              <property name="valign">center</property>
+                              <signal name="clicked" handler="prev_featured"/>
+                              <style>
+                                <class name="flat"/>
+                                <class name="circular"/>
+                              </style>
+                              <child>
+                                <object class="GtkImage">
+                                  <property name="icon_name">go-previous-symbolic</property>
+                                </object>
+                              </child>
+                            </object>
+                          </child>
+                          <child>
+                            <object class="GtkStack" id="featured_stack">
+                              <property name="hexpand">1</property>
+                            </object>
+                          </child>
+                          <child>
+                            <object class="GtkButton" id="next_featured_button">
+                              <property name="visible">0</property>
+                              <property name="valign">center</property>
+                              <signal name="clicked" handler="next_featured"/>
+                              <style>
+                                <class name="flat"/>
+                                <class name="circular"/>
+                              </style>
+                              <child>
+                                <object class="GtkImage">
+                                  <property name="icon_name">go-next-symbolic</property>
+                                </object>
+                              </child>
+                            </object>
+                          </child>
+                        </object>
+                      </property>
+                    </object>
+                  </child>
+                </object>
+              </child>
+
+              <child>
+                <object class="GtkButton">
+                  <property name="margin_top">12</property>
+                  <property name="halign">end</property>
+                  <property name="label" translatable="1">Open App Center now</property>
+                  <signal name="clicked" handler="open_software"/>
+                </object>
+              </child>
+            </object>
+          </child>
+          </object>
+        </child>
+
+        </object>
+    </child>
+
+
+  </template>
+</interface>
diff --git a/gnome-initial-setup/pages/apps/meson.build b/gnome-initial-setup/pages/apps/meson.build
new file mode 100644
index 0000000..dec2b38
--- /dev/null
+++ b/gnome-initial-setup/pages/apps/meson.build
@@ -0,0 +1,10 @@
+sources += gnome.compile_resources(
+    'apps-resources',
+    files('apps.gresource.xml'),
+    c_name: 'apps'
+)
+
+sources += files(
+    'gis-apps-page.c',
+    'gis-apps-page.h',
+)
diff --git a/gnome-initial-setup/pages/goa/gis-goa-page.c b/gnome-initial-setup/pages/goa/gis-goa-page.c
index 6d0a4a2..47c5cb2 100644
--- a/gnome-initial-setup/pages/goa/gis-goa-page.c
+++ b/gnome-initial-setup/pages/goa/gis-goa-page.c
@@ -309,6 +309,13 @@ populate_provider_list (GisGoaPage *page)
     (gchar *[]) { "google", "owncloud", "windows_live", "facebook", NULL };
 
   listed_providers = run_goa_helper_sync ("list-providers", NULL);
+
+  if (!listed_providers)
+    {
+      gtk_widget_hide (GTK_WIDGET (page));
+      return;
+    }
+
   providers_variant = g_variant_parse (G_VARIANT_TYPE ("a(ssviu)"),
                                        listed_providers,
                                        NULL,
diff --git a/gnome-initial-setup/pages/meson.build b/gnome-initial-setup/pages/meson.build
index 3230501..9654a7c 100644
--- a/gnome-initial-setup/pages/meson.build
+++ b/gnome-initial-setup/pages/meson.build
@@ -10,6 +10,8 @@ pages = [
    'software',
    'summary',
    'welcome',
+   'ubuntu-report',
+   'apps',
 ]
 
 if libmalcontent_dep.found() and libmalcontent_ui_dep.found()
diff --git a/gnome-initial-setup/pages/privacy/gis-privacy-page.c b/gnome-initial-setup/pages/privacy/gis-privacy-page.c
index b910651..362327b 100644
--- a/gnome-initial-setup/pages/privacy/gis-privacy-page.c
+++ b/gnome-initial-setup/pages/privacy/gis-privacy-page.c
@@ -229,7 +229,7 @@ activate_link (GtkLabel       *label,
 static void
 gis_privacy_page_locale_changed (GisPage *page)
 {
-  gis_page_set_title (GIS_PAGE (page), _("Privacy"));
+  gis_page_set_title (GIS_PAGE (page), _("Welcome to Ubuntu"));
 }
 
 static void
diff --git a/gnome-initial-setup/pages/summary/gis-summary-page.c b/gnome-initial-setup/pages/summary/gis-summary-page.c
index b3f2371..6e33010 100644
--- a/gnome-initial-setup/pages/summary/gis-summary-page.c
+++ b/gnome-initial-setup/pages/summary/gis-summary-page.c
@@ -189,7 +189,7 @@ done_cb (GtkButton *button, GisSummaryPage *page)
       log_user_in (page);
       break;
     case GIS_DRIVER_MODE_EXISTING_USER:
-      g_application_quit (G_APPLICATION (GIS_PAGE (page)->driver));
+      gis_driver_quit (GIS_PAGE (page)->driver);
     default:
       break;
     }
diff --git a/gnome-initial-setup/pages/ubuntu-report/gis-ubuntu-report-page.c b/gnome-initial-setup/pages/ubuntu-report/gis-ubuntu-report-page.c
new file mode 100644
index 0000000..a1fb678
--- /dev/null
+++ b/gnome-initial-setup/pages/ubuntu-report/gis-ubuntu-report-page.c
@@ -0,0 +1,461 @@
+/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
+/*
+ * Copyright (C) 2018 Canonical Ltd.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see <http://www.gnu.org/licenses/>.
+ */
+
+/* Ubuntu report page {{{1 */
+
+#define PAGE_ID "ubuntu-report"
+
+#include "config.h"
+#include "gis-ubuntu-report-page.h"
+#include "gis-page-header.h"
+#include "ubuntu-report-resources.h"
+
+#include <glib/gi18n.h>
+#include <gio/gio.h>
+#include <libsysmetrics.h>
+
+struct _GisUbuntuReportPagePrivate {
+  GtkWidget *opt_in_check;
+  GtkWidget *header;
+  GtkWidget *cancel_report_b;
+  GtkWidget *show_report_b;
+  GCancellable *cancellable;
+  gchar *report;
+};
+typedef struct _GisUbuntuReportPagePrivate GisUbuntuReportPagePrivate;
+
+G_DEFINE_TYPE_WITH_PRIVATE (GisUbuntuReportPage, gis_ubuntu_report_page, GIS_TYPE_PAGE);
+
+static void
+cancel_report (GtkButton *button, GisUbuntuReportPagePrivate *priv)
+{
+  gtk_widget_set_visible (GTK_WIDGET (priv->cancel_report_b), FALSE);
+  gtk_widget_set_visible (GTK_WIDGET (priv->show_report_b), TRUE);
+
+  g_cancellable_cancel (priv->cancellable);
+  g_clear_object (&priv->cancellable);
+  priv->cancellable = g_cancellable_new ();
+}
+
+static void
+gis_ubuntu_report_page_constructed (GObject *object)
+{
+  GisUbuntuReportPage *page = GIS_UBUNTU_REPORT_PAGE (object);
+  GisUbuntuReportPagePrivate *priv = gis_ubuntu_report_page_get_instance_private (page);
+  g_autoptr(GtkWidget) image = NULL;
+
+  G_OBJECT_CLASS (gis_ubuntu_report_page_parent_class)->constructed (object);
+
+  priv->cancellable = g_cancellable_new ();
+  g_signal_connect(priv->cancel_report_b, "clicked", G_CALLBACK(cancel_report), priv);
+
+  image = g_object_ref_sink (gtk_image_new_from_resource (
+    "/org/gnome/initial-setup/ubuntu-report.svg"));
+  g_object_set (priv->header, "paintable", gtk_image_get_paintable (GTK_IMAGE (image)), NULL);
+
+  gis_page_set_complete (GIS_PAGE (page), TRUE);
+}
+
+static void
+gis_ubuntu_report_page_finalize (GObject *object)
+{
+  GisUbuntuReportPage *page = GIS_UBUNTU_REPORT_PAGE (object);
+  GisUbuntuReportPagePrivate *priv = gis_ubuntu_report_page_get_instance_private (page);
+
+  g_cancellable_cancel (priv->cancellable);
+  g_clear_object (&priv->cancellable);
+
+  g_free (priv->report);
+
+  G_OBJECT_CLASS (gis_ubuntu_report_page_parent_class)->finalize (object);
+}
+
+static void
+on_collect_report_thread (GTask        *task,
+                          gpointer      source_object,
+                          gpointer      task_data,
+                          GCancellable *cancellable)
+{
+  g_autofree char *report = NULL;
+  g_autofree char *error_msg = NULL;
+
+  error_msg = sysmetrics_collect (&report);
+  if (error_msg != NULL) {
+    g_task_return_new_error (task, G_IO_ERROR, G_IO_ERROR_FAILED, "%s", error_msg);
+    return;
+  }
+
+  g_task_return_pointer (task, g_steal_pointer (&report), g_free);
+}
+
+static void
+on_show_report_callback (GObject      *source_object,
+                         GAsyncResult *res,
+                         gpointer      user_data)
+{
+  GtkWidget *dialog, *scroll, *text_view;
+  GTask *task = G_TASK (res);
+  g_autoptr (GError) error = NULL;
+  GisUbuntuReportPage *page = GIS_UBUNTU_REPORT_PAGE (user_data);
+  GisUbuntuReportPagePrivate *priv = gis_ubuntu_report_page_get_instance_private (page);
+
+  gtk_widget_set_visible (GTK_WIDGET (priv->show_report_b), TRUE);
+  gtk_widget_set_visible (GTK_WIDGET (priv->cancel_report_b), FALSE);
+
+  priv->report = g_task_propagate_pointer (task, &error);
+
+  if (g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
+    return;
+
+  if (error != NULL) {
+    dialog = gtk_message_dialog_new (GTK_WINDOW (gtk_widget_get_root (GTK_WIDGET (page))),
+                                     GTK_DIALOG_MODAL | GTK_DIALOG_DESTROY_WITH_PARENT,
+                                     GTK_MESSAGE_ERROR,
+                                     GTK_BUTTONS_CLOSE,
+                                     _("Failed to get report information: %s"),
+                                     error->message);
+    g_signal_connect_swapped (dialog,
+                              "response",
+                              G_CALLBACK (gtk_window_destroy),
+                              dialog);
+    gtk_widget_show (dialog);
+    return;
+  }
+
+  dialog = gtk_dialog_new_with_buttons (_("Ubuntu Report Contents"),
+                                        GTK_WINDOW (gtk_widget_get_root (GTK_WIDGET (page))),
+                                        GTK_DIALOG_MODAL |
+                                        GTK_DIALOG_DESTROY_WITH_PARENT |
+                                        GTK_DIALOG_USE_HEADER_BAR,
+                                        NULL, NULL);
+  gtk_widget_set_size_request (dialog, 800, 600);
+
+  scroll = gtk_scrolled_window_new ();
+
+  text_view = gtk_text_view_new ();
+  gtk_text_view_set_monospace (GTK_TEXT_VIEW (text_view), TRUE);
+  gtk_widget_set_hexpand (scroll, TRUE);
+  gtk_widget_set_vexpand (scroll, TRUE);
+  gtk_widget_set_margin_top (scroll, 6);
+  gtk_widget_set_margin_bottom (scroll, 6);
+  gtk_widget_set_margin_start (scroll, 6);
+  gtk_widget_set_margin_end (scroll, 6);
+  gtk_box_append (GTK_BOX (gtk_dialog_get_content_area (GTK_DIALOG (dialog))), scroll);
+  gtk_text_buffer_set_text (gtk_text_view_get_buffer (GTK_TEXT_VIEW (text_view)), priv->report, -1);
+  gtk_scrolled_window_set_child (GTK_SCROLLED_WINDOW (scroll), text_view);
+
+  g_signal_connect_swapped (dialog,
+                            "response",
+                            G_CALLBACK (gtk_window_destroy),
+                            dialog);
+  gtk_widget_show (dialog);
+}
+
+static void
+show_report (GtkButton *button, GisUbuntuReportPage *page)
+{
+  GisUbuntuReportPagePrivate *priv = gis_ubuntu_report_page_get_instance_private (page);
+  g_autofree char *error = NULL;
+  g_autoptr(GTask) task = NULL;
+
+  gtk_widget_set_visible (GTK_WIDGET (priv->show_report_b), FALSE);
+  gtk_widget_set_visible (GTK_WIDGET (priv->cancel_report_b), TRUE);
+
+  task = g_task_new (page, priv->cancellable, on_show_report_callback, page);
+
+  if (priv->report) {
+    g_task_return_pointer (task, g_steal_pointer (&priv->report), NULL);
+    return;
+  }
+
+  g_task_set_return_on_cancel (task, TRUE);
+  g_task_run_in_thread (task, on_collect_report_thread);
+}
+
+static void
+on_show_uri_cb (GObject *source_object,
+                GAsyncResult *result,
+                gpointer user_data)
+{
+  g_autoptr(GError) error = NULL;
+  GisUbuntuReportPage *page = user_data;
+
+  if (!gtk_show_uri_full_finish (GTK_WINDOW (source_object), result, &error)) {
+    GtkWidget *dialog;
+
+    if (g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
+      return;
+
+    dialog = gtk_message_dialog_new (GTK_WINDOW (gtk_widget_get_root (GTK_WIDGET (page))),
+                                     GTK_DIALOG_MODAL | GTK_DIALOG_DESTROY_WITH_PARENT,
+                                     GTK_MESSAGE_ERROR,
+                                     GTK_BUTTONS_CLOSE,
+                                     _("Failed to show privacy policy: %s"), error->message);
+    g_signal_connect_swapped (dialog,
+                              "response",
+                              G_CALLBACK (gtk_window_destroy),
+                              dialog);
+    gtk_widget_show (dialog);
+  }
+}
+
+static void
+show_legal (GtkButton *button, GisUbuntuReportPage *page)
+{
+  GisUbuntuReportPagePrivate *priv = gis_ubuntu_report_page_get_instance_private (page);
+
+  gtk_show_uri_full (GTK_WINDOW (gtk_widget_get_root (GTK_WIDGET (page))),
+                     "https://www.ubuntu.com/legal/terms-and-policies/systems-information-notice",
+                     GDK_CURRENT_TIME, priv->cancellable, on_show_uri_cb, page);
+}
+
+typedef struct {
+  gboolean send_allowed;
+  gchar *report;
+  guint timeout_id;
+} SendReportThreadData;
+
+static void
+send_report_thread_data_free (SendReportThreadData *data)
+{
+  g_clear_handle_id (&data->timeout_id, g_source_remove);
+  g_free (data->report);
+  g_free (data);
+}
+
+static void
+on_collect_send_report_thread (GTask *task,
+                               gpointer source_object,
+                               gpointer task_data,
+                               GCancellable *cancellable)
+{
+  SendReportThreadData *data = task_data;
+  g_autofree char *error = NULL;
+
+  if (!data->send_allowed) {
+    error = sysmetrics_send_decline (FALSE, "");
+
+    if (g_task_get_completed (task))
+      return;
+
+    if (error != NULL) {
+      g_task_return_new_error (task, G_IO_ERROR, G_IO_ERROR_FAILED,
+                               _("Failed to send report decline: %s"), error);
+      return;
+    }
+
+    g_task_return_boolean (task, TRUE);
+    return;
+  }
+
+  if (!data->report) {
+    error = sysmetrics_collect (&data->report);
+
+    if (g_task_get_completed (task))
+      return;
+
+    if (error != NULL) {
+      g_task_return_new_error (task, G_IO_ERROR, G_IO_ERROR_FAILED,
+                               _("Failed to get report information: %s"), error);
+      return;
+    }
+  }
+
+  if (g_task_return_error_if_cancelled (task))
+    return;
+
+  g_assert (data->report);
+  error = sysmetrics_send_report (data->report, FALSE, "");
+
+  if (g_task_get_completed (task))
+    return;
+
+  if (error != NULL) {
+    g_task_return_new_error (task, G_IO_ERROR, G_IO_ERROR_FAILED,
+                             _("Failed to send report information: %s"), error);
+    return;
+  }
+
+  g_task_return_boolean (task, TRUE);
+}
+
+static void
+on_error_dialog_dismissed (GisUbuntuReportPage *page)
+{
+  gis_page_apply_complete (GIS_PAGE (page), TRUE);
+}
+
+static void
+show_report_error_dialog (GisUbuntuReportPage *page,
+                          const char          *message)
+{
+  GtkWidget *dialog;
+
+  dialog = gtk_message_dialog_new (GTK_WINDOW (gtk_widget_get_root (GTK_WIDGET (page))),
+                                   GTK_DIALOG_MODAL | GTK_DIALOG_DESTROY_WITH_PARENT,
+                                   GTK_MESSAGE_ERROR,
+                                   GTK_BUTTONS_CLOSE,
+                                   "%s", message);
+  g_signal_connect_swapped (dialog,
+                            "response",
+                            G_CALLBACK (on_error_dialog_dismissed),
+                            page);
+  g_signal_connect_swapped (dialog,
+                            "response",
+                            G_CALLBACK (gtk_window_destroy),
+                            dialog);
+
+  gtk_widget_show (g_steal_pointer (&dialog));
+}
+
+static void
+on_collect_send_report_callback (GObject *source_object,
+                                 GAsyncResult *res,
+                                 gpointer user_data)
+{
+  GTask *task = G_TASK (res);
+  GisUbuntuReportPage *page = GIS_UBUNTU_REPORT_PAGE (source_object);
+  g_autoptr (GError) error = NULL;
+
+  gtk_widget_set_sensitive (GTK_WIDGET (page), TRUE);
+
+  if (!g_task_propagate_boolean (task, &error)) {
+    g_warning ("%s", error->message);
+
+    if (g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED)) {
+      /* User cancelled the action, so let's back to selection */
+      gis_page_apply_complete (GIS_PAGE (page), FALSE);
+      return;
+    }
+
+    show_report_error_dialog (page, error->message);
+    return;
+  }
+
+  gis_page_apply_complete (GIS_PAGE (page), TRUE);
+}
+
+static gboolean
+on_apply_timeout (gpointer data)
+{
+  SendReportThreadData *task_data;
+  GTask *task = G_TASK (data);
+
+  task_data = g_task_get_task_data (task);
+  task_data->timeout_id = 0;
+
+  if (g_task_get_completed (task)) {
+    return FALSE;
+  }
+
+  /* Here we can't just g_task_return_error, because it won't make the error
+   * being handled until the task thread is terminated. So we just cancel it
+   * adding some special handling on callback.
+   */
+  g_cancellable_cancel (g_task_get_cancellable (task));
+  return FALSE;
+}
+
+/* Retrieve and send the report (or decline thereof).
+ * Don't wait on the server to respond though, go to next page immediately.
+ * Ubuntu Report will take care of sending it via a Systemd service if the
+ * thread doesn't manage to do it anyway.
+ */
+static gboolean
+gis_ubuntu_report_page_apply (GisPage *page, GCancellable *cancellable)
+{
+  GisUbuntuReportPagePrivate *priv = gis_ubuntu_report_page_get_instance_private (GIS_UBUNTU_REPORT_PAGE (page));
+  g_autofree char *error = NULL;
+  g_autoptr(GTask) task = NULL;
+  SendReportThreadData *data;
+
+  data = g_new0 (SendReportThreadData, 1);
+  data->send_allowed = gtk_check_button_get_active (GTK_CHECK_BUTTON (priv->opt_in_check));
+  data->report = g_steal_pointer (&priv->report);
+
+  task = g_task_new (page, cancellable, on_collect_send_report_callback, NULL);
+  g_task_set_return_on_cancel (task, TRUE);
+  data->timeout_id = g_timeout_add_seconds (15, on_apply_timeout, task);
+  g_task_set_task_data (task, g_steal_pointer (&data),
+                        (GDestroyNotify) send_report_thread_data_free);
+
+  gtk_widget_set_sensitive (GTK_WIDGET (page), FALSE);
+  g_task_run_in_thread (task, on_collect_send_report_thread);
+
+  return TRUE;
+}
+
+static void
+gis_ubuntu_report_page_locale_changed (GisPage *page)
+{
+  GisUbuntuReportPagePrivate *priv = gis_ubuntu_report_page_get_instance_private (GIS_UBUNTU_REPORT_PAGE (page));
+  g_autofree gchar *timezone_text = NULL;
+  g_autofree gchar *description_text = NULL;
+  g_autoptr(GError) error = NULL;
+
+  gis_page_set_title (GIS_PAGE (page), _("Help improve Ubuntu"));
+
+  if (!g_file_get_contents ("/etc/timezone", &timezone_text, NULL, &error)) {
+    g_warning ("Failed to get timezone from /etc/timezone: %s", error->message);
+    return;
+  }
+
+  description_text = g_strdup_printf (_("Ubuntu can report information that helps developers improve it. "
+                                        "This includes things like the computer model, "
+					"what software is installed, "
+					"and the approximate location you chose (%s)."), g_strstrip (timezone_text));
+  g_object_set (priv->header, "subtitle", description_text, NULL);
+}
+
+static void
+gis_ubuntu_report_page_class_init (GisUbuntuReportPageClass *klass)
+{
+  GisPageClass *page_class = GIS_PAGE_CLASS (klass);
+  GObjectClass *object_class = G_OBJECT_CLASS (klass);
+
+  gtk_widget_class_set_template_from_resource (GTK_WIDGET_CLASS (klass), "/org/gnome/initial-setup/gis-ubuntu-report-page.ui");
+  gtk_widget_class_bind_template_child_private (GTK_WIDGET_CLASS (klass), GisUbuntuReportPage, header);
+  gtk_widget_class_bind_template_child_private (GTK_WIDGET_CLASS (klass), GisUbuntuReportPage, show_report_b);
+  gtk_widget_class_bind_template_child_private (GTK_WIDGET_CLASS (klass), GisUbuntuReportPage, cancel_report_b);
+  gtk_widget_class_bind_template_child_private (GTK_WIDGET_CLASS (klass), GisUbuntuReportPage, opt_in_check);
+  gtk_widget_class_bind_template_callback (GTK_WIDGET_CLASS (klass), show_report);
+  gtk_widget_class_bind_template_callback (GTK_WIDGET_CLASS (klass), show_legal);
+
+  page_class->page_id = PAGE_ID;
+  page_class->apply = gis_ubuntu_report_page_apply;
+  page_class->locale_changed = gis_ubuntu_report_page_locale_changed;
+  object_class->constructed = gis_ubuntu_report_page_constructed;
+  object_class->finalize = gis_ubuntu_report_page_finalize;
+}
+
+static void
+gis_ubuntu_report_page_init (GisUbuntuReportPage *page)
+{
+  g_resources_register (ubuntu_report_get_resource ());
+  g_type_ensure (GIS_TYPE_PAGE_HEADER);
+
+  gtk_widget_init_template (GTK_WIDGET (page));
+}
+
+GisPage *
+gis_prepare_ubuntu_report_page (GisDriver *driver)
+{
+  return g_object_new (GIS_TYPE_UBUNTU_REPORT_PAGE,
+                       "driver", driver,
+                       NULL);
+}
diff --git a/gnome-initial-setup/pages/ubuntu-report/gis-ubuntu-report-page.h b/gnome-initial-setup/pages/ubuntu-report/gis-ubuntu-report-page.h
new file mode 100644
index 0000000..9ba7500
--- /dev/null
+++ b/gnome-initial-setup/pages/ubuntu-report/gis-ubuntu-report-page.h
@@ -0,0 +1,52 @@
+/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
+/*
+ * Copyright (C) 2018 Canonical Ltd.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef __GIS_UBUNTU_REPORT_PAGE_H__
+#define __GIS_UBUNTU_REPORT_PAGE_H__
+
+#include "gnome-initial-setup.h"
+
+G_BEGIN_DECLS
+
+#define GIS_TYPE_UBUNTU_REPORT_PAGE            (gis_ubuntu_report_page_get_type ())
+#define GIS_UBUNTU_REPORT_PAGE(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GIS_TYPE_UBUNTU_REPORT_PAGE, GisUbuntuReportPage))
+#define GIS_UBUNTU_REPORT_PAGE_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass),  GIS_TYPE_UBUNTU_REPORT_PAGE, GisUbuntuReportPageClass))
+#define GIS_IS_UBUNTU_REPORT_PAGE(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GIS_TYPE_UBUNTU_REPORT_PAGE))
+#define GIS_IS_UBUNTU_REPORT_PAGE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass),  GIS_TYPE_UBUNTU_REPORT_PAGE))
+#define GIS_UBUNTU_REPORT_PAGE_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj),  GIS_TYPE_UBUNTU_REPORT_PAGE, GisUbuntuReportPageClass))
+
+typedef struct _GisUbuntuReportPage        GisUbuntuReportPage;
+typedef struct _GisUbuntuReportPageClass   GisUbuntuReportPageClass;
+
+struct _GisUbuntuReportPage
+{
+  GisPage parent;
+};
+
+struct _GisUbuntuReportPageClass
+{
+  GisPageClass parent_class;
+};
+
+GType gis_ubuntu_report_page_get_type (void);
+
+GisPage *gis_prepare_ubuntu_report_page (GisDriver *driver);
+
+G_END_DECLS
+
+#endif /* __GIS_UBUNTU_REPORT_PAGE_H__ */
diff --git a/gnome-initial-setup/pages/ubuntu-report/gis-ubuntu-report-page.ui b/gnome-initial-setup/pages/ubuntu-report/gis-ubuntu-report-page.ui
new file mode 100644
index 0000000..ad0816c
--- /dev/null
+++ b/gnome-initial-setup/pages/ubuntu-report/gis-ubuntu-report-page.ui
@@ -0,0 +1,104 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<interface>
+  <template class="GisUbuntuReportPage" parent="GisPage">
+    <child>
+      <object class="AdwPreferencesPage">
+
+        <child>
+          <object class="AdwPreferencesGroup">
+            <child>
+              <object class="GisPageHeader" id="header">
+                <property name="margin_top">24</property>
+                <property name="title" translatable="yes">Help improve Ubuntu</property>
+                <property name="show_icon" bind-source="GisUbuntuReportPage" bind-property="small-screen" bind-flags="invert-boolean|sync-create"/>
+              </object>
+            </child>
+          </object>
+        </child>
+
+        <child>
+          <object class="AdwPreferencesGroup" id="opt_in_group">
+            <child>
+              <object class="AdwActionRow">
+                <property name="title" translatable="yes">Yes, send system info to Canonical</property>
+                <property name="use-underline">True</property>
+                <property name="activatable-widget">opt_in_check</property>
+                <child type="prefix">
+                  <object class="GtkCheckButton" id="opt_in_check">
+                    <property name="active">True</property>
+                    <property name="valign">center</property>
+                  </object>
+                </child>
+              </object>
+            </child>
+            <child>
+              <object class="AdwActionRow">
+                <property name="title" translatable="yes">No, don&apos;t send system info</property>
+                <property name="use-underline">True</property>
+                <property name="activatable-widget">opt_out_check</property>
+                <child type="prefix">
+                  <object class="GtkCheckButton" id="opt_out_check">
+                    <property name="valign">center</property>
+                    <property name="group">opt_in_check</property>
+                  </object>
+                </child>
+              </object>
+            </child>
+          </object>
+        </child>
+
+        <child>
+          <object class="AdwPreferencesGroup">
+            <child>
+              <object class="GtkBox">
+                <property name="halign">end</property>
+                <style>
+                  <class name="linked" />
+                </style>
+                <child>
+                  <object class="GtkButton" id="show_report_b">
+                    <property name="visible">True</property>
+                    <property name="label" translatable="1">Show the First Report</property>
+                    <signal name="clicked" handler="show_report"/>
+                  </object>
+                </child>
+                <child>
+                  <object class="GtkButton" id="cancel_report_b">
+                    <property name="visible">False</property>
+                    <property name="label" translatable="1">Cancel</property>
+                  </object>
+                </child>
+                <child>
+                  <object class="GtkButton">
+                    <property name="label" translatable="1">Legal notice</property>
+                    <signal name="clicked" handler="show_legal"/>
+                  </object>
+                </child>
+              </object>
+            </child>
+          </object>
+        </child>
+
+        <child>
+          <object class="AdwPreferencesGroup">
+          <!-- Disabled for now as setting doesn't exist - remove if we decide it's not necessary -->
+          <property name="visible">False</property>
+            <child>
+              <object class="GtkLabel" id="footer_label">
+                <property name="valign">end</property>
+                <property name="vexpand">True</property>
+                <property name="label" translatable="yes">You can change your mind later in Settings → Privacy → Diagnostics.</property>
+                <property name="justify">center</property>
+                <property name="wrap">True</property>
+                <style>
+                  <class name="dim-label"/>
+                </style>
+              </object>
+            </child>
+          </object>
+        </child>
+
+      </object>
+    </child>
+  </template>
+</interface>
diff --git a/gnome-initial-setup/pages/ubuntu-report/meson.build b/gnome-initial-setup/pages/ubuntu-report/meson.build
new file mode 100644
index 0000000..a0f949b
--- /dev/null
+++ b/gnome-initial-setup/pages/ubuntu-report/meson.build
@@ -0,0 +1,10 @@
+sources += gnome.compile_resources(
+    'ubuntu-report-resources',
+    files('ubuntu-report.gresource.xml'),
+    c_name: 'ubuntu_report'
+)
+
+sources += files(
+    'gis-ubuntu-report-page.c',
+    'gis-ubuntu-report-page.h',
+)
diff --git a/gnome-initial-setup/pages/ubuntu-report/ubuntu-report.gresource.xml b/gnome-initial-setup/pages/ubuntu-report/ubuntu-report.gresource.xml
new file mode 100644
index 0000000..6b28415
--- /dev/null
+++ b/gnome-initial-setup/pages/ubuntu-report/ubuntu-report.gresource.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<gresources>
+  <gresource prefix="/org/gnome/initial-setup">
+    <file preprocess="xml-stripblanks" alias="gis-ubuntu-report-page.ui">gis-ubuntu-report-page.ui</file>
+    <file alias="ubuntu-report.svg">ubuntu-report.svg</file>
+  </gresource>
+</gresources>
+
diff --git a/gnome-initial-setup/pages/ubuntu-report/ubuntu-report.svg b/gnome-initial-setup/pages/ubuntu-report/ubuntu-report.svg
new file mode 100644
index 0000000..8c1d52c
--- /dev/null
+++ b/gnome-initial-setup/pages/ubuntu-report/ubuntu-report.svg
@@ -0,0 +1 @@
+<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="Layer_1" x="0px" y="0px" width="150px" height="150px" viewBox="0 0 400 400" style="enable-background:new 0 0 400 400;" xml:space="preserve"> <style type="text/css"> .st0{fill:#666666; fill-opacity:0.25;} </style> <g> <path class="st0" d="M301.4,372.4C271.7,390,237,400,200,400C89.5,400,0,310.5,0,200C0,89.5,89.5,0,200,0c110.5,0,200,89.5,200,200 c0,36.4-9.7,70.6-26.8,100l0,0L400,400l-100-26.8L301.4,372.4L301.4,372.4z"/> </g> </svg>
diff --git a/po/POTFILES.in b/po/POTFILES.in
index 656fe0f..4027d14 100644
--- a/po/POTFILES.in
+++ b/po/POTFILES.in
@@ -46,3 +46,8 @@ gnome-initial-setup/pages/timezone/gis-timezone-page.ui
 gnome-initial-setup/pages/welcome/gis-welcome-page.c
 gnome-initial-setup/pages/welcome/gis-welcome-page.ui
 po/EXTRA_STRINGS.sh
+gnome-initial-setup/pages/timezone/gis-timezone-page.ui
+gnome-initial-setup/pages/ubuntu-report/gis-ubuntu-report-page.c
+gnome-initial-setup/pages/ubuntu-report/gis-ubuntu-report-page.ui
+gnome-initial-setup/pages/apps/gis-apps-page.c
+gnome-initial-setup/pages/apps/gis-apps-page.ui
