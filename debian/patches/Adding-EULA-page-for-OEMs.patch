From: Matthew Hagemann <matt.hagemann@canonical.com>
Date: Tue, 11 Jun 2024 14:40:47 +0200
Subject: Adding EULA page for OEMs

The EULA page is conditionaly displayed if a EULA.pdf file is present under
/usr/share/desktop-provision/eula/.
It will first attempt to asynchronously loading the EULA matching your current
locale (EULA_<locale>.pdf), using the variants first and then fallbacking to
base language if the current varient is not available.
If no match is found, EULA.pdf is then used.

Note that multi-page pdf's are supported.

Co-authored-by: Didier Roche-Tolomelli <didrocks@ubuntu.com>
Co-authored-by: Marco Trevisan <marco@ubuntu.com>
---
 gnome-initial-setup/gnome-initial-setup.c         |   2 +
 gnome-initial-setup/meson.build                   |   1 +
 gnome-initial-setup/pages/eula/eula.gresource.xml |   7 +
 gnome-initial-setup/pages/eula/gis-eula-page.c    | 331 ++++++++++++++++++++++
 gnome-initial-setup/pages/eula/gis-eula-page.css  |  10 +
 gnome-initial-setup/pages/eula/gis-eula-page.h    |  35 +++
 gnome-initial-setup/pages/eula/gis-eula-page.ui   |  43 +++
 gnome-initial-setup/pages/eula/meson.build        |  10 +
 gnome-initial-setup/pages/meson.build             |   1 +
 9 files changed, 440 insertions(+)
 create mode 100644 gnome-initial-setup/pages/eula/eula.gresource.xml
 create mode 100644 gnome-initial-setup/pages/eula/gis-eula-page.c
 create mode 100644 gnome-initial-setup/pages/eula/gis-eula-page.css
 create mode 100644 gnome-initial-setup/pages/eula/gis-eula-page.h
 create mode 100644 gnome-initial-setup/pages/eula/gis-eula-page.ui
 create mode 100644 gnome-initial-setup/pages/eula/meson.build

diff --git a/gnome-initial-setup/gnome-initial-setup.c b/gnome-initial-setup/gnome-initial-setup.c
index b526038..f02cea9 100644
--- a/gnome-initial-setup/gnome-initial-setup.c
+++ b/gnome-initial-setup/gnome-initial-setup.c
@@ -32,6 +32,7 @@
 #include "pages/welcome/gis-welcome-page.h"
 #include "pages/language/gis-language-page.h"
 #include "pages/keyboard/gis-keyboard-page.h"
+#include "pages/eula/gis-eula-page.h"
 #include "pages/network/gis-network-page.h"
 #include "pages/timezone/gis-timezone-page.h"
 #include "pages/privacy/gis-privacy-page.h"
@@ -69,6 +70,7 @@ static PageData page_table[] = {
   PAGE (welcome, FALSE),
   PAGE (language, FALSE),
   PAGE (keyboard, FALSE),
+  PAGE (eula,     TRUE),
   PAGE (network,  FALSE),
   PAGE (privacy,  FALSE),
   PAGE (timezone, TRUE),
diff --git a/gnome-initial-setup/meson.build b/gnome-initial-setup/meson.build
index b593a01..bbb72a4 100644
--- a/gnome-initial-setup/meson.build
+++ b/gnome-initial-setup/meson.build
@@ -56,6 +56,7 @@ dependencies = [
     dependency ('snapd-glib-2'),
     dependency ('libsoup-3.0'),
     dependency ('sysmetrics'),
+    dependency ('poppler-glib'),
     ibus_dep,
     libmalcontent_dep,
     libmalcontent_ui_dep,
diff --git a/gnome-initial-setup/pages/eula/eula.gresource.xml b/gnome-initial-setup/pages/eula/eula.gresource.xml
new file mode 100644
index 0000000..fdf3cf1
--- /dev/null
+++ b/gnome-initial-setup/pages/eula/eula.gresource.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<gresources>
+  <gresource prefix="/org/gnome/initial-setup">
+    <file preprocess="xml-stripblanks">gis-eula-page.ui</file>
+    <file>gis-eula-page.css</file>
+  </gresource>
+</gresources>
diff --git a/gnome-initial-setup/pages/eula/gis-eula-page.c b/gnome-initial-setup/pages/eula/gis-eula-page.c
new file mode 100644
index 0000000..242edd6
--- /dev/null
+++ b/gnome-initial-setup/pages/eula/gis-eula-page.c
@@ -0,0 +1,331 @@
+/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
+/*
+ * Copyright (C) 2024 Canonical
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+/* eula page */
+
+#define PAGE_ID "eula"
+
+#include "config.h"
+#include "gis-eula-page.h"
+
+#include <poppler.h>
+
+struct _GisEulaPage
+{
+  GisPage parent;
+
+  GtkWidget *page_stack;
+  GtkWidget *loading_spinner;
+  GtkWidget *document_missing;
+  GtkWidget *document_window;
+  GtkDrawingArea *drawing_area;
+  GCancellable *loading_cancellable;
+  gchar *current_locale;
+
+  PopplerDocument *document;
+  guint total_pages;
+};
+
+G_DEFINE_TYPE (GisEulaPage, gis_eula_page, GIS_TYPE_PAGE)
+
+/* Define autopointers for poppler-glib */
+G_DEFINE_AUTOPTR_CLEANUP_FUNC(PopplerDocument, g_object_unref);
+G_DEFINE_AUTOPTR_CLEANUP_FUNC(PopplerPage, g_object_unref);
+
+#define GIS_EULA_DEFAULT_PAGE_PATH "/usr/share/desktop-provision/eula"
+#define GIS_EULA_DEFAULT_PAGE_NAME "EULA"
+
+#define PAGES_SEPARATION 10
+
+static void
+load_pdf_thread (GTask *task,
+                 gpointer source_object,
+                 gpointer task_data,
+                 GCancellable *cancellable)
+{
+  const char *current_locale = task_data;
+
+  /* Current_locale can be en_US.UTF-8@euro for instance */
+  g_auto(GStrv) lang_and_variants = g_get_locale_variants (current_locale);
+
+  /* Iterate through the array of locale strings to attempt loading the PDF. */
+  for (size_t i = 0; ; i++)
+    {
+      const char *locale = lang_and_variants[i];
+      g_autofree char *localized = NULL;
+
+      if (g_task_return_error_if_cancelled (task))
+        return;
+
+      if (!locale)
+        localized = g_strdup (GIS_EULA_DEFAULT_PAGE_NAME ".pdf");
+      else
+        localized = g_strdup_printf (GIS_EULA_DEFAULT_PAGE_NAME "_%s.pdf", locale);
+
+      g_autoptr(GFile) file =
+        g_file_new_build_filename (GIS_EULA_DEFAULT_PAGE_PATH, localized, NULL);
+
+      g_autoptr(GError) error = NULL;
+      g_autoptr(PopplerDocument) document = NULL;
+      document = poppler_document_new_from_gfile (file, NULL, NULL, &error);
+      if (!document)
+        {
+          g_debug ("Could not locate PDF %s: %s",
+                   g_file_peek_path (file), error->message);
+          if (!locale)
+            {
+              g_task_return_error (task, g_steal_pointer (&error));
+              return;
+            }
+
+          continue;
+        }
+
+      g_task_return_pointer (task, g_steal_pointer (&document), g_object_unref);
+      return;
+    }
+
+  /* If document is loaded, process it */
+  g_task_return_new_error_literal (task, G_IO_ERROR, G_IO_ERROR_NOT_FOUND,
+                                   "Failed to load any EULA document");
+}
+
+double
+pdf_get_total_size (GisEulaPage *page, double width,
+                    double *scale, double *out_max_width)
+{
+  double total_height = 0;
+  double page_width, page_height;
+
+  *out_max_width = 0;
+
+  for (int i = 0; i < page->total_pages; i++)
+    {
+      g_autoptr(PopplerPage) ppage = poppler_document_get_page (page->document, i);
+      poppler_page_get_size (ppage, &page_width, NULL);
+
+      *out_max_width = MAX (*out_max_width, page_width);
+    }
+
+  *scale = width / *out_max_width;
+
+  for (int i = 0; i < page->total_pages; i++)
+    {
+      g_autoptr(PopplerPage) ppage = poppler_document_get_page (page->document, i);
+      poppler_page_get_size (ppage, &page_width, &page_height);
+
+      total_height += page_height * (*scale);
+    }
+
+  if (page->total_pages)
+    total_height += (PAGES_SEPARATION * page->total_pages - 1);
+
+  return total_height;
+}
+
+static void
+pdf_render_all_pages (GisEulaPage *page,
+                      cairo_t     *cairo,
+                      double       max_width,
+                      double       scale)
+{
+  double y_offset = 0;
+
+  for (int i = 0; i < page->total_pages; i++)
+    {
+      g_autoptr(PopplerPage) ppage = poppler_document_get_page (page->document, i);
+      double page_width, page_height;
+      poppler_page_get_size (ppage, &page_width, &page_height);
+      double x = ((max_width - page_width) / 2) * scale;
+
+      /* Ensure page as white background, as it's not for all PDFs */
+      cairo_rectangle (cairo, x, y_offset,
+                       page_width * scale, page_height * scale);
+      cairo_set_source_rgb (cairo, 1, 1, 1);
+      cairo_fill (cairo);
+
+      cairo_save (cairo);
+      cairo_translate (cairo, x, y_offset);
+      cairo_scale (cairo, scale, scale);
+      poppler_page_render (ppage, cairo);
+      cairo_restore (cairo);
+
+      cairo_rectangle (cairo, 0,
+                       y_offset + (page_height + PAGES_SEPARATION / 2.0) * scale,
+                       max_width * scale, 1);
+      cairo_set_source_rgb (cairo, 0, 0, 0);
+      cairo_fill (cairo);
+
+      y_offset += (page_height + PAGES_SEPARATION) * scale;
+    }
+}
+
+static void
+pdf_view_draw_content(GtkDrawingArea *area,
+                      cairo_t        *cr,
+                      int             width,
+                      int             height,
+                      gpointer        user_data)
+{
+  GisEulaPage *page = GIS_EULA_PAGE (user_data);
+  double scale;
+  double max_width;
+  double total_height = pdf_get_total_size (page, width, &scale, &max_width);
+
+  gtk_widget_set_size_request (GTK_WIDGET (page->drawing_area), -1, total_height);
+  pdf_render_all_pages (page, cr, max_width, scale);
+}
+
+static void
+gis_eula_page_constructed (GObject *object)
+{
+  G_OBJECT_CLASS (gis_eula_page_parent_class)->constructed (object);
+}
+
+static void
+gis_eula_page_finalize (GObject *object)
+{
+  GisEulaPage *page = GIS_EULA_PAGE (object);
+
+  g_free (page->current_locale);
+  g_clear_object (&page->document);
+  g_cancellable_cancel (page->loading_cancellable);
+  g_clear_object (&page->loading_cancellable);
+
+  G_OBJECT_CLASS (gis_eula_page_parent_class)->finalize (object);
+}
+
+static void
+pdf_loaded (GObject *source_object,
+            GAsyncResult *res,
+            gpointer user_data)
+{
+  GisEulaPage *eula_page = GIS_EULA_PAGE (source_object);
+  g_autoptr (PopplerDocument) document = NULL;
+  g_autoptr (GError) error = NULL;
+
+  document = g_task_propagate_pointer (G_TASK (res), &error);
+  if (error)
+    {
+      if (g_error_matches(error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
+        return;
+
+      g_warning ("Failed loading PDF: %s", error->message);
+    }
+
+  if (document)
+    {
+      eula_page->total_pages = poppler_document_get_n_pages (document);
+      eula_page->document = g_steal_pointer (&document);
+      gtk_stack_set_visible_child (GTK_STACK (eula_page->page_stack),
+                                   GTK_WIDGET (eula_page->document_window));
+    }
+  else if (eula_page->document)
+    {
+      g_warning ("Failed to reload PDF on locale change, keep previous one");
+    }
+  else
+    {
+      gtk_stack_set_visible_child (GTK_STACK (eula_page->page_stack),
+                                   GTK_WIDGET (eula_page->document_missing));
+      g_critical ("No EULA to show!");
+    }
+
+  gis_page_set_complete (GIS_PAGE (eula_page), TRUE);
+}
+
+static void
+gis_eula_page_locale_changed (GisPage *page)
+{
+  GisEulaPage *eula_page = GIS_EULA_PAGE(page);
+  const gchar *language;
+
+  language = gis_driver_get_user_language (GIS_PAGE (page)->driver);
+
+  /* Locale has not changed, do nothing */
+  if (!eula_page->document &&
+      g_strcmp0 (language, eula_page->current_locale) == 0)
+      return;
+
+  g_cancellable_cancel (eula_page->loading_cancellable);
+  g_clear_object (&eula_page->loading_cancellable);
+  eula_page->loading_cancellable = g_cancellable_new ();
+
+  g_set_str (&eula_page->current_locale, language);
+
+  gtk_stack_set_visible_child (GTK_STACK (eula_page->page_stack),
+                               GTK_WIDGET (eula_page->loading_spinner));
+
+  /* Attempt to reload the PDF based on the new locale */
+  g_autoptr(GTask) task = g_task_new (page, eula_page->loading_cancellable,
+                                      pdf_loaded, NULL);
+  g_task_set_task_data (task, g_strdup (eula_page->current_locale), g_free);
+  g_task_run_in_thread (task, load_pdf_thread);
+}
+
+static void
+gis_eula_page_class_init (GisEulaPageClass *klass)
+{
+  GisPageClass *page_class = GIS_PAGE_CLASS (klass);
+  GObjectClass *object_class = G_OBJECT_CLASS (klass);
+
+  gtk_widget_class_set_template_from_resource (GTK_WIDGET_CLASS (klass), "/org/gnome/initial-setup/gis-eula-page.ui");
+  gtk_widget_class_bind_template_child (GTK_WIDGET_CLASS (klass), GisEulaPage, page_stack);
+  gtk_widget_class_bind_template_child (GTK_WIDGET_CLASS (klass), GisEulaPage, loading_spinner);
+  gtk_widget_class_bind_template_child (GTK_WIDGET_CLASS (klass), GisEulaPage, document_window);
+  gtk_widget_class_bind_template_child (GTK_WIDGET_CLASS (klass), GisEulaPage, document_missing);
+  gtk_widget_class_bind_template_child (GTK_WIDGET_CLASS (klass), GisEulaPage, drawing_area);
+
+  page_class->page_id = PAGE_ID;
+  page_class->locale_changed = gis_eula_page_locale_changed;
+
+  object_class->constructed = gis_eula_page_constructed;
+  object_class->finalize = gis_eula_page_finalize;
+}
+
+static void
+gis_eula_page_init (GisEulaPage *page)
+{
+  /* UI setup if PDF loaded successfully */
+  gtk_widget_init_template (GTK_WIDGET (page));
+  gtk_drawing_area_set_draw_func (page->drawing_area, pdf_view_draw_content, page, NULL);
+  gis_add_style_from_resource ("/org/gnome/initial-setup/gis-eula-page.css");
+  gis_page_set_needs_accept (GIS_PAGE (page), TRUE);
+}
+
+GisPage *
+gis_prepare_eula_page (GisDriver *driver)
+{
+  /* check for the existence of the EULA file, skip the eula
+   * page if it is absent.
+   */
+  if (!g_file_test (GIS_EULA_DEFAULT_PAGE_PATH G_DIR_SEPARATOR_S
+                    GIS_EULA_DEFAULT_PAGE_NAME ".pdf",
+                    G_FILE_TEST_EXISTS | G_FILE_TEST_IS_REGULAR |
+                    G_FILE_TEST_IS_SYMLINK))
+    {
+      g_debug ("No EULA page found, skipping page");
+      return NULL;
+    }
+
+  return g_object_new (GIS_TYPE_EULA_PAGE,
+                       "driver", driver,
+                       NULL);
+}
+
diff --git a/gnome-initial-setup/pages/eula/gis-eula-page.css b/gnome-initial-setup/pages/eula/gis-eula-page.css
new file mode 100644
index 0000000..9b0bebd
--- /dev/null
+++ b/gnome-initial-setup/pages/eula/gis-eula-page.css
@@ -0,0 +1,10 @@
+.eula-document-scroll-area {
+  background-color: rgba(0, 0, 0, 0.15);
+}
+
+.eula-document-area {
+  background-color: white;
+  margin: 10px 20px;
+  margin-bottom: 20px;
+  box-shadow: 6px 8px 15px @dark_3;
+}
diff --git a/gnome-initial-setup/pages/eula/gis-eula-page.h b/gnome-initial-setup/pages/eula/gis-eula-page.h
new file mode 100644
index 0000000..ebe5ff5
--- /dev/null
+++ b/gnome-initial-setup/pages/eula/gis-eula-page.h
@@ -0,0 +1,35 @@
+/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
+/*
+ * Copyright (C) 2024 Canonical
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#pragma once
+
+#include <glib-object.h>
+
+#include "gnome-initial-setup.h"
+
+G_BEGIN_DECLS
+
+#define GIS_TYPE_EULA_PAGE (gis_eula_page_get_type ())
+G_DECLARE_FINAL_TYPE (GisEulaPage, gis_eula_page, GIS, EULA_PAGE, GisPage)
+
+GType gis_eula_page_get_type (void);
+
+GisPage *gis_prepare_eula_page (GisDriver *driver);
+
+G_END_DECLS
diff --git a/gnome-initial-setup/pages/eula/gis-eula-page.ui b/gnome-initial-setup/pages/eula/gis-eula-page.ui
new file mode 100644
index 0000000..043d28a
--- /dev/null
+++ b/gnome-initial-setup/pages/eula/gis-eula-page.ui
@@ -0,0 +1,43 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<interface>
+  <template class="GisEulaPage" parent="GisPage">
+    <child>
+      <object class="GtkStack" id="page_stack">
+        <property name="transition-type">crossfade</property>
+        <child>
+          <object class="GtkSpinner" id="loading_spinner">
+            <property name="halign">center</property>
+            <property name="valign">center</property>
+            <property name="spinning">True</property>
+          </object>
+        </child>
+        <child>
+          <object class="GtkImage" id="document_missing">
+            <property name="halign">center</property>
+            <property name="valign">center</property>
+            <property name="icon-name">image-missing-symbolic</property>
+            <property name="pixel-size">250</property>
+          </object>
+        </child>
+        <child>
+          <object class="GtkScrolledWindow" id="document_window">
+            <property name="can-focus">True</property>
+            <property name="hscrollbar-policy">never</property>
+            <style>
+              <class name="eula-document-scroll-area"/>
+            </style>
+            <child>
+              <object class="GtkDrawingArea" id="drawing_area">
+                <style>
+                  <class name="eula-document-area"/>
+                </style>
+                <property name="can-focus">False</property>
+                <property name="vexpand">True</property>
+              </object>
+            </child>
+          </object>
+        </child>
+      </object>
+    </child>
+  </template>
+</interface>
diff --git a/gnome-initial-setup/pages/eula/meson.build b/gnome-initial-setup/pages/eula/meson.build
new file mode 100644
index 0000000..389d3ab
--- /dev/null
+++ b/gnome-initial-setup/pages/eula/meson.build
@@ -0,0 +1,10 @@
+sources += gnome.compile_resources(
+    'eula-resources',
+    files('eula.gresource.xml'),
+    c_name: 'eula'
+)
+
+sources += files(
+    'gis-eula-page.c',
+    'gis-eula-page.h',
+)
diff --git a/gnome-initial-setup/pages/meson.build b/gnome-initial-setup/pages/meson.build
index 2ed2a5f..1a54d65 100644
--- a/gnome-initial-setup/pages/meson.build
+++ b/gnome-initial-setup/pages/meson.build
@@ -1,5 +1,6 @@
 pages = [
    'account',
+   'eula',
    'language',
    'keyboard',
    'network',
